#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3603
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FileSetMan
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FileSetMan")]
	public partial class FileSetManDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertFileSet(FileSet instance);
    partial void UpdateFileSet(FileSet instance);
    partial void DeleteFileSet(FileSet instance);
    #endregion
		
		public FileSetManDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FileSetManConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FileSetManDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FileSetManDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FileSetManDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FileSetManDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<File> File
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<FileSet> FileSet
		{
			get
			{
				return this.GetTable<FileSet>();
			}
		}
	}
	
	[Table(Name="dbo.[File]")]
	[DataContract()]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _FileSetID;
		
		private string _FileName;
		
		private long _Size;
		
		private int _ShowIndex;
		
		private EntityRef<FileSet> _FileSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnFileSetIDChanging(long value);
    partial void OnFileSetIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnSizeChanging(long value);
    partial void OnSizeChanged();
    partial void OnShowIndexChanging(int value);
    partial void OnShowIndexChanged();
    #endregion
		
		public File()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileSetID", DbType="BigInt NOT NULL")]
		[DataMember(Order=2)]
		public long FileSetID
		{
			get
			{
				return this._FileSetID;
			}
			set
			{
				if ((this._FileSetID != value))
				{
					if (this._FileSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileSetIDChanging(value);
					this.SendPropertyChanging();
					this._FileSetID = value;
					this.SendPropertyChanged("FileSetID");
					this.OnFileSetIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="BigInt NOT NULL")]
		[DataMember(Order=4)]
		public long Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_ShowIndex", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int ShowIndex
		{
			get
			{
				return this._ShowIndex;
			}
			set
			{
				if ((this._ShowIndex != value))
				{
					this.OnShowIndexChanging(value);
					this.SendPropertyChanging();
					this._ShowIndex = value;
					this.SendPropertyChanged("ShowIndex");
					this.OnShowIndexChanged();
				}
			}
		}
		
		[Association(Name="FileSet_File", Storage="_FileSet", ThisKey="FileSetID", OtherKey="ID", IsForeignKey=true)]
		internal FileSet FileSet
		{
			get
			{
				return this._FileSet.Entity;
			}
			set
			{
				FileSet previousValue = this._FileSet.Entity;
				if (((previousValue != value) 
							|| (this._FileSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileSet.Entity = null;
						previousValue.File.Remove(this);
					}
					this._FileSet.Entity = value;
					if ((value != null))
					{
						value.File.Add(this);
						this._FileSetID = value.ID;
					}
					else
					{
						this._FileSetID = default(long);
					}
					this.SendPropertyChanged("FileSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._FileSet = default(EntityRef<FileSet>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.FileSet")]
	[DataContract()]
	public partial class FileSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Path;
		
		private bool _Ready;
		
		private System.Nullable<long> _total;
		
		private System.Nullable<long> _downloaded;
		
		private EntitySet<File> _File;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnReadyChanging(bool value);
    partial void OnReadyChanged();
    partial void OntotalChanging(System.Nullable<long> value);
    partial void OntotalChanged();
    partial void OndownloadedChanging(System.Nullable<long> value);
    partial void OndownloadedChanged();
    #endregion
		
		public FileSet()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_Ready", DbType="Bit NOT NULL")]
		[DataMember(Order=3)]
		public bool Ready
		{
			get
			{
				return this._Ready;
			}
			set
			{
				if ((this._Ready != value))
				{
					this.OnReadyChanging(value);
					this.SendPropertyChanging();
					this._Ready = value;
					this.SendPropertyChanged("Ready");
					this.OnReadyChanged();
				}
			}
		}
		
		[Column(Storage="_total", DbType="BigInt")]
		[DataMember(Order=4)]
		public System.Nullable<long> total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[Column(Storage="_downloaded", DbType="BigInt")]
		[DataMember(Order=5)]
		public System.Nullable<long> downloaded
		{
			get
			{
				return this._downloaded;
			}
			set
			{
				if ((this._downloaded != value))
				{
					this.OndownloadedChanging(value);
					this.SendPropertyChanging();
					this._downloaded = value;
					this.SendPropertyChanged("downloaded");
					this.OndownloadedChanged();
				}
			}
		}
		
		[Association(Name="FileSet_File", Storage="_File", ThisKey="ID", OtherKey="FileSetID")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<File> File
		{
			get
			{
				if ((this.serializing 
							&& (this._File.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._File;
			}
			set
			{
				this._File.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_File(File entity)
		{
			this.SendPropertyChanging();
			entity.FileSet = this;
		}
		
		private void detach_File(File entity)
		{
			this.SendPropertyChanging();
			entity.FileSet = null;
		}
		
		private void Initialize()
		{
			this._File = new EntitySet<File>(new Action<File>(this.attach_File), new Action<File>(this.detach_File));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
