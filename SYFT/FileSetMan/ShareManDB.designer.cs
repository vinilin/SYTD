#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3603
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FileSetMan
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SYTD")]
	public partial class ShareManDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProgress(Progress instance);
    partial void UpdateProgress(Progress instance);
    partial void DeleteProgress(Progress instance);
    #endregion
		
		public ShareManDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SYTDConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ShareManDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShareManDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShareManDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShareManDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Progress> Progress
		{
			get
			{
				return this.GetTable<Progress>();
			}
		}
	}
	
	[Table(Name="dbo.Progress")]
	public partial class Progress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _SrcIp;
		
		private string _DstIp;
		
		private System.Nullable<long> _FileSetID;
		
		private System.Nullable<long> _ItemId;
		
		private string _Title;
		
		private string _Category;
		
		private string _Owner;
		
		private string _AuditMan;
		
		private System.Nullable<long> _total;
		
		private System.Nullable<long> _downloaded;
		
		private string _State;
		
		private System.Nullable<System.DateTime> _CmmitDate;
		
		private System.Nullable<System.DateTime> _FinishDate;
		
		private string _Ext1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSrcIpChanging(string value);
    partial void OnSrcIpChanged();
    partial void OnDstIpChanging(string value);
    partial void OnDstIpChanged();
    partial void OnFileSetIDChanging(System.Nullable<long> value);
    partial void OnFileSetIDChanged();
    partial void OnItemIdChanging(System.Nullable<long> value);
    partial void OnItemIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnAuditManChanging(string value);
    partial void OnAuditManChanged();
    partial void OntotalChanging(System.Nullable<long> value);
    partial void OntotalChanged();
    partial void OndownloadedChanging(System.Nullable<long> value);
    partial void OndownloadedChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCmmitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCmmitDateChanged();
    partial void OnFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishDateChanged();
    partial void OnExt1Changing(string value);
    partial void OnExt1Changed();
    #endregion
		
		public Progress()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrcIp", DbType="VarChar(50)")]
		public string SrcIp
		{
			get
			{
				return this._SrcIp;
			}
			set
			{
				if ((this._SrcIp != value))
				{
					this.OnSrcIpChanging(value);
					this.SendPropertyChanging();
					this._SrcIp = value;
					this.SendPropertyChanged("SrcIp");
					this.OnSrcIpChanged();
				}
			}
		}
		
		[Column(Storage="_DstIp", DbType="VarChar(50)")]
		public string DstIp
		{
			get
			{
				return this._DstIp;
			}
			set
			{
				if ((this._DstIp != value))
				{
					this.OnDstIpChanging(value);
					this.SendPropertyChanging();
					this._DstIp = value;
					this.SendPropertyChanged("DstIp");
					this.OnDstIpChanged();
				}
			}
		}
		
		[Column(Storage="_FileSetID", DbType="BigInt")]
		public System.Nullable<long> FileSetID
		{
			get
			{
				return this._FileSetID;
			}
			set
			{
				if ((this._FileSetID != value))
				{
					this.OnFileSetIDChanging(value);
					this.SendPropertyChanging();
					this._FileSetID = value;
					this.SendPropertyChanged("FileSetID");
					this.OnFileSetIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemId", DbType="BigInt")]
		public System.Nullable<long> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(250)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NChar(10)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NChar(10)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_AuditMan", DbType="NChar(10)")]
		public string AuditMan
		{
			get
			{
				return this._AuditMan;
			}
			set
			{
				if ((this._AuditMan != value))
				{
					this.OnAuditManChanging(value);
					this.SendPropertyChanging();
					this._AuditMan = value;
					this.SendPropertyChanged("AuditMan");
					this.OnAuditManChanged();
				}
			}
		}
		
		[Column(Storage="_total", DbType="BigInt")]
		public System.Nullable<long> total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[Column(Storage="_downloaded", DbType="BigInt")]
		public System.Nullable<long> downloaded
		{
			get
			{
				return this._downloaded;
			}
			set
			{
				if ((this._downloaded != value))
				{
					this.OndownloadedChanging(value);
					this.SendPropertyChanging();
					this._downloaded = value;
					this.SendPropertyChanged("downloaded");
					this.OndownloadedChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_CmmitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CmmitDate
		{
			get
			{
				return this._CmmitDate;
			}
			set
			{
				if ((this._CmmitDate != value))
				{
					this.OnCmmitDateChanging(value);
					this.SendPropertyChanging();
					this._CmmitDate = value;
					this.SendPropertyChanged("CmmitDate");
					this.OnCmmitDateChanged();
				}
			}
		}
		
		[Column(Storage="_FinishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}
		
		[Column(Storage="_Ext1", DbType="VarChar(50)")]
		public string Ext1
		{
			get
			{
				return this._Ext1;
			}
			set
			{
				if ((this._Ext1 != value))
				{
					this.OnExt1Changing(value);
					this.SendPropertyChanging();
					this._Ext1 = value;
					this.SendPropertyChanged("Ext1");
					this.OnExt1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
