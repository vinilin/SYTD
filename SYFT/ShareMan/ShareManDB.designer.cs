#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShareMan
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SYTD")]
	public partial class ShareManDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAudit(Audit instance);
    partial void UpdateAudit(Audit instance);
    partial void DeleteAudit(Audit instance);
    partial void InsertSoftware(Software instance);
    partial void UpdateSoftware(Software instance);
    partial void DeleteSoftware(Software instance);
    partial void InsertCartoon(Cartoon instance);
    partial void UpdateCartoon(Cartoon instance);
    partial void DeleteCartoon(Cartoon instance);
    partial void InsertDistribute(Distribute instance);
    partial void UpdateDistribute(Distribute instance);
    partial void DeleteDistribute(Distribute instance);
    partial void InsertFileItem(FileItem instance);
    partial void UpdateFileItem(FileItem instance);
    partial void DeleteFileItem(FileItem instance);
    partial void InsertFileSetLink(FileSetLink instance);
    partial void UpdateFileSetLink(FileSetLink instance);
    partial void DeleteFileSetLink(FileSetLink instance);
    partial void InsertItemLink(ItemLink instance);
    partial void UpdateItemLink(ItemLink instance);
    partial void DeleteItemLink(ItemLink instance);
    partial void InsertMovie(Movie instance);
    partial void UpdateMovie(Movie instance);
    partial void DeleteMovie(Movie instance);
    partial void InsertMusic(Music instance);
    partial void UpdateMusic(Music instance);
    partial void DeleteMusic(Music instance);
    partial void InsertPublishType(PublishType instance);
    partial void UpdatePublishType(PublishType instance);
    partial void DeletePublishType(PublishType instance);
    partial void InsertBaseItem(BaseItem instance);
    partial void UpdateBaseItem(BaseItem instance);
    partial void DeleteBaseItem(BaseItem instance);
    partial void InsertProgress(Progress instance);
    partial void UpdateProgress(Progress instance);
    partial void DeleteProgress(Progress instance);
    partial void InsertVidioNews(VidioNews instance);
    partial void UpdateVidioNews(VidioNews instance);
    partial void DeleteVidioNews(VidioNews instance);
    #endregion
		
		public ShareManDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SYTDConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ShareManDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShareManDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShareManDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShareManDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Audit> Audit
		{
			get
			{
				return this.GetTable<Audit>();
			}
		}
		
		public System.Data.Linq.Table<Software> Software
		{
			get
			{
				return this.GetTable<Software>();
			}
		}
		
		public System.Data.Linq.Table<Cartoon> Cartoon
		{
			get
			{
				return this.GetTable<Cartoon>();
			}
		}
		
		public System.Data.Linq.Table<Distribute> Distribute
		{
			get
			{
				return this.GetTable<Distribute>();
			}
		}
		
		public System.Data.Linq.Table<FileItem> FileItem
		{
			get
			{
				return this.GetTable<FileItem>();
			}
		}
		
		public System.Data.Linq.Table<FileSetLink> FileSetLink
		{
			get
			{
				return this.GetTable<FileSetLink>();
			}
		}
		
		public System.Data.Linq.Table<ItemLink> ItemLink
		{
			get
			{
				return this.GetTable<ItemLink>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movie
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<Music> Music
		{
			get
			{
				return this.GetTable<Music>();
			}
		}
		
		public System.Data.Linq.Table<PublishType> PublishType
		{
			get
			{
				return this.GetTable<PublishType>();
			}
		}
		
		public System.Data.Linq.Table<InterServer> InterServer
		{
			get
			{
				return this.GetTable<InterServer>();
			}
		}
		
		public System.Data.Linq.Table<BaseItem> BaseItem
		{
			get
			{
				return this.GetTable<BaseItem>();
			}
		}
		
		public System.Data.Linq.Table<T_SubSection> T_SubSection
		{
			get
			{
				return this.GetTable<T_SubSection>();
			}
		}
		
		public System.Data.Linq.Table<Progress> Progress
		{
			get
			{
				return this.GetTable<Progress>();
			}
		}
		
		public System.Data.Linq.Table<VidioNews> VidioNews
		{
			get
			{
				return this.GetTable<VidioNews>();
			}
		}
	}
	
	[Table(Name="dbo.Audit")]
	public partial class Audit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _AuditOwner;
		
		private int _State;
		
		private System.Nullable<System.DateTime> _AuditDate;
		
		private string _Reason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnAuditOwnerChanging(string value);
    partial void OnAuditOwnerChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAuditDateChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    #endregion
		
		public Audit()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuditOwner", DbType="VarChar(50)")]
		public string AuditOwner
		{
			get
			{
				return this._AuditOwner;
			}
			set
			{
				if ((this._AuditOwner != value))
				{
					this.OnAuditOwnerChanging(value);
					this.SendPropertyChanging();
					this._AuditOwner = value;
					this.SendPropertyChanged("AuditOwner");
					this.OnAuditOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_AuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AuditDate
		{
			get
			{
				return this._AuditDate;
			}
			set
			{
				if ((this._AuditDate != value))
				{
					this.OnAuditDateChanging(value);
					this.SendPropertyChanging();
					this._AuditDate = value;
					this.SendPropertyChanged("AuditDate");
					this.OnAuditDateChanged();
				}
			}
		}
		
		[Column(Storage="_Reason", DbType="VarChar(256)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Software")]
	public partial class Software : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Manufacturer;
		
		private string _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    #endregion
		
		public Software()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Manufacturer", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Cartoon")]
	public partial class Cartoon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Author;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    #endregion
		
		public Cartoon()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Distribute")]
	public partial class Distribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _AreaID;
		
		private long _ItemID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSubCodeChanging(string value);
    partial void OnSubCodeChanged();
    partial void OnItemIDChanging(long value);
    partial void OnItemIDChanged();
    #endregion
		
		public Distribute()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AreaID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SubCode
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					this.OnSubCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("SubCode");
					this.OnSubCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ItemID", DbType="BigInt NOT NULL")]
		public long ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FileItem")]
	public partial class FileItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    #endregion
		
		public FileItem()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FileSetLink")]
	public partial class FileSetLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _IP;
		
		private long _FileSetID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnFileSetIDChanging(long value);
    partial void OnFileSetIDChanged();
    #endregion
		
		public FileSetLink()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_IP", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[Column(Storage="_FileSetID", DbType="BigInt NOT NULL")]
		public long FileSetID
		{
			get
			{
				return this._FileSetID;
			}
			set
			{
				if ((this._FileSetID != value))
				{
					this.OnFileSetIDChanging(value);
					this.SendPropertyChanging();
					this._FileSetID = value;
					this.SendPropertyChanged("FileSetID");
					this.OnFileSetIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ItemLink")]
	public partial class ItemLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _SrcLink;
		
		private long _InterLink;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSrcLinkChanging(long value);
    partial void OnSrcLinkChanged();
    partial void OnInterLinkChanging(long value);
    partial void OnInterLinkChanged();
    #endregion
		
		public ItemLink()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrcLink", DbType="BigInt NOT NULL")]
		public long SrcLink
		{
			get
			{
				return this._SrcLink;
			}
			set
			{
				if ((this._SrcLink != value))
				{
					this.OnSrcLinkChanging(value);
					this.SendPropertyChanging();
					this._SrcLink = value;
					this.SendPropertyChanged("SrcLink");
					this.OnSrcLinkChanged();
				}
			}
		}
		
		[Column(Storage="_InterLink", DbType="BigInt NOT NULL")]
		public long InterLink
		{
			get
			{
				return this._InterLink;
			}
			set
			{
				if ((this._InterLink != value))
				{
					this.OnInterLinkChanging(value);
					this.SendPropertyChanging();
					this._InterLink = value;
					this.SendPropertyChanged("InterLink");
					this.OnInterLinkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Movie")]
	public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Player;
		
		private string _Director;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnPlayerChanging(string value);
    partial void OnPlayerChanged();
    partial void OnDirectorChanging(string value);
    partial void OnDirectorChanged();
    #endregion
		
		public Movie()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Player", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this.OnPlayerChanging(value);
					this.SendPropertyChanging();
					this._Player = value;
					this.SendPropertyChanged("Player");
					this.OnPlayerChanged();
				}
			}
		}
		
		[Column(Storage="_Director", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Director
		{
			get
			{
				return this._Director;
			}
			set
			{
				if ((this._Director != value))
				{
					this.OnDirectorChanging(value);
					this.SendPropertyChanging();
					this._Director = value;
					this.SendPropertyChanged("Director");
					this.OnDirectorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Music")]
	public partial class Music : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Singer;
		
		private string _Author;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSingerChanging(string value);
    partial void OnSingerChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    #endregion
		
		public Music()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Singer", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Singer
		{
			get
			{
				return this._Singer;
			}
			set
			{
				if ((this._Singer != value))
				{
					this.OnSingerChanging(value);
					this.SendPropertyChanging();
					this._Singer = value;
					this.SendPropertyChanged("Singer");
					this.OnSingerChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PublishType")]
	public partial class PublishType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _Category;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCategoryChanging(long value);
    partial void OnCategoryChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PublishType()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="BigInt NOT NULL")]
		public long Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.InterServer")]
	public partial class InterServer
	{
		
		private string _ip;
		
		public InterServer()
		{
		}
		
		[Column(Storage="_ip", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ip
		{
			get
			{
				return this._ip;
			}
			set
			{
				if ((this._ip != value))
				{
					this._ip = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BaseItem")]
	public partial class BaseItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Owner;
		
		private string _SubCode;
		
		private System.DateTime _Birth;
		
		private string _Title;
		
		private long _Category;
		
		private long _PublishType;
		
		private string _IssueDate;
		
		private string _Brief;
		
		private string _Ext1;
		
		private string _Ext2;
		
		private string _Ext3;
		
		private string _Ext4;
		
		private string _Ext5;
		
		private string _Ext6;
		
		private string _Ext7;
		
		private string _Ext8;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnSubCodeChanging(string value);
    partial void OnSubCodeChanged();
    partial void OnBirthChanging(System.DateTime value);
    partial void OnBirthChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCategoryChanging(long value);
    partial void OnCategoryChanged();
    partial void OnPublishTypeChanging(long value);
    partial void OnPublishTypeChanged();
    partial void OnIssueDateChanging(string value);
    partial void OnIssueDateChanged();
    partial void OnBriefChanging(string value);
    partial void OnBriefChanged();
    partial void OnExt1Changing(string value);
    partial void OnExt1Changed();
    partial void OnExt2Changing(string value);
    partial void OnExt2Changed();
    partial void OnExt3Changing(string value);
    partial void OnExt3Changed();
    partial void OnExt4Changing(string value);
    partial void OnExt4Changed();
    partial void OnExt5Changing(string value);
    partial void OnExt5Changed();
    partial void OnExt6Changing(string value);
    partial void OnExt6Changed();
    partial void OnExt7Changing(string value);
    partial void OnExt7Changed();
    partial void OnExt8Changing(string value);
    partial void OnExt8Changed();
    #endregion
		
		public BaseItem()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_SubCode", DbType="VarChar(50)")]
		public string SubCode
		{
			get
			{
				return this._SubCode;
			}
			set
			{
				if ((this._SubCode != value))
				{
					this.OnSubCodeChanging(value);
					this.SendPropertyChanging();
					this._SubCode = value;
					this.SendPropertyChanged("SubCode");
					this.OnSubCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Birth", DbType="DateTime NOT NULL")]
		public System.DateTime Birth
		{
			get
			{
				return this._Birth;
			}
			set
			{
				if ((this._Birth != value))
				{
					this.OnBirthChanging(value);
					this.SendPropertyChanging();
					this._Birth = value;
					this.SendPropertyChanged("Birth");
					this.OnBirthChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="BigInt NOT NULL")]
		public long Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_PublishType", DbType="BigInt NOT NULL")]
		public long PublishType
		{
			get
			{
				return this._PublishType;
			}
			set
			{
				if ((this._PublishType != value))
				{
					this.OnPublishTypeChanging(value);
					this.SendPropertyChanging();
					this._PublishType = value;
					this.SendPropertyChanged("PublishType");
					this.OnPublishTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IssueDate", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[Column(Storage="_Brief", DbType="VarChar(2048) NOT NULL", CanBeNull=false)]
		public string Brief
		{
			get
			{
				return this._Brief;
			}
			set
			{
				if ((this._Brief != value))
				{
					this.OnBriefChanging(value);
					this.SendPropertyChanging();
					this._Brief = value;
					this.SendPropertyChanged("Brief");
					this.OnBriefChanged();
				}
			}
		}
		
		[Column(Storage="_Ext1", DbType="VarChar(256)")]
		public string Ext1
		{
			get
			{
				return this._Ext1;
			}
			set
			{
				if ((this._Ext1 != value))
				{
					this.OnExt1Changing(value);
					this.SendPropertyChanging();
					this._Ext1 = value;
					this.SendPropertyChanged("Ext1");
					this.OnExt1Changed();
				}
			}
		}
		
		[Column(Storage="_Ext2", DbType="VarChar(256)")]
		public string Ext2
		{
			get
			{
				return this._Ext2;
			}
			set
			{
				if ((this._Ext2 != value))
				{
					this.OnExt2Changing(value);
					this.SendPropertyChanging();
					this._Ext2 = value;
					this.SendPropertyChanged("Ext2");
					this.OnExt2Changed();
				}
			}
		}
		
		[Column(Storage="_Ext3", DbType="VarChar(256)")]
		public string Ext3
		{
			get
			{
				return this._Ext3;
			}
			set
			{
				if ((this._Ext3 != value))
				{
					this.OnExt3Changing(value);
					this.SendPropertyChanging();
					this._Ext3 = value;
					this.SendPropertyChanged("Ext3");
					this.OnExt3Changed();
				}
			}
		}
		
		[Column(Storage="_Ext4", DbType="VarChar(256)")]
		public string Ext4
		{
			get
			{
				return this._Ext4;
			}
			set
			{
				if ((this._Ext4 != value))
				{
					this.OnExt4Changing(value);
					this.SendPropertyChanging();
					this._Ext4 = value;
					this.SendPropertyChanged("Ext4");
					this.OnExt4Changed();
				}
			}
		}
		
		[Column(Storage="_Ext5", DbType="VarChar(256)")]
		public string Ext5
		{
			get
			{
				return this._Ext5;
			}
			set
			{
				if ((this._Ext5 != value))
				{
					this.OnExt5Changing(value);
					this.SendPropertyChanging();
					this._Ext5 = value;
					this.SendPropertyChanged("Ext5");
					this.OnExt5Changed();
				}
			}
		}
		
		[Column(Storage="_Ext6", DbType="VarChar(256)")]
		public string Ext6
		{
			get
			{
				return this._Ext6;
			}
			set
			{
				if ((this._Ext6 != value))
				{
					this.OnExt6Changing(value);
					this.SendPropertyChanging();
					this._Ext6 = value;
					this.SendPropertyChanged("Ext6");
					this.OnExt6Changed();
				}
			}
		}
		
		[Column(Storage="_Ext7", DbType="VarChar(256)")]
		public string Ext7
		{
			get
			{
				return this._Ext7;
			}
			set
			{
				if ((this._Ext7 != value))
				{
					this.OnExt7Changing(value);
					this.SendPropertyChanging();
					this._Ext7 = value;
					this.SendPropertyChanged("Ext7");
					this.OnExt7Changed();
				}
			}
		}
		
		[Column(Storage="_Ext8", DbType="VarChar(256)")]
		public string Ext8
		{
			get
			{
				return this._Ext8;
			}
			set
			{
				if ((this._Ext8 != value))
				{
					this.OnExt8Changing(value);
					this.SendPropertyChanging();
					this._Ext8 = value;
					this.SendPropertyChanged("Ext8");
					this.OnExt8Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.T_SubSection")]
	public partial class T_SubSection
	{
		
		private int _id;
		
		private string _subCode;
		
		private string _subName;
		
		private string _serverIp;
		
		private System.Nullable<bool> _isCenter;
		
		private string _IpArea;
		
		public T_SubSection()
		{
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_subCode", DbType="VarChar(50)")]
		public string subCode
		{
			get
			{
				return this._subCode;
			}
			set
			{
				if ((this._subCode != value))
				{
					this._subCode = value;
				}
			}
		}
		
		[Column(Storage="_subName", DbType="VarChar(50)")]
		public string subName
		{
			get
			{
				return this._subName;
			}
			set
			{
				if ((this._subName != value))
				{
					this._subName = value;
				}
			}
		}
		
		[Column(Storage="_serverIp", DbType="VarChar(50)")]
		public string serverIp
		{
			get
			{
				return this._serverIp;
			}
			set
			{
				if ((this._serverIp != value))
				{
					this._serverIp = value;
				}
			}
		}
		
		[Column(Storage="_isCenter", DbType="Bit")]
		public System.Nullable<bool> isCenter
		{
			get
			{
				return this._isCenter;
			}
			set
			{
				if ((this._isCenter != value))
				{
					this._isCenter = value;
				}
			}
		}
		
		[Column(Storage="_IpArea", DbType="VarChar(50)")]
		public string IpArea
		{
			get
			{
				return this._IpArea;
			}
			set
			{
				if ((this._IpArea != value))
				{
					this._IpArea = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Progress")]
	public partial class Progress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _SrcIp;
		
		private string _DstIp;
		
		private System.Nullable<long> _FileSetID;
		
		private System.Nullable<long> _ItemId;
		
		private string _Title;
		
		private string _Category;
		
		private string _Owner;
		
		private string _AuditMan;
		
		private System.Nullable<long> _total;
		
		private System.Nullable<long> _downloaded;
		
		private string _State;
		
		private System.Nullable<System.DateTime> _CmmitDate;
		
		private System.Nullable<System.DateTime> _FinishDate;
		
		private string _Ext1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSrcIpChanging(string value);
    partial void OnSrcIpChanged();
    partial void OnDstIpChanging(string value);
    partial void OnDstIpChanged();
    partial void OnFileSetIDChanging(System.Nullable<long> value);
    partial void OnFileSetIDChanged();
    partial void OnItemIdChanging(System.Nullable<long> value);
    partial void OnItemIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnAuditManChanging(string value);
    partial void OnAuditManChanged();
    partial void OntotalChanging(System.Nullable<long> value);
    partial void OntotalChanged();
    partial void OndownloadedChanging(System.Nullable<long> value);
    partial void OndownloadedChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCmmitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCmmitDateChanged();
    partial void OnFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishDateChanged();
    partial void OnExt1Changing(string value);
    partial void OnExt1Changed();
    #endregion
		
		public Progress()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SrcIp", DbType="VarChar(50)")]
		public string SrcIp
		{
			get
			{
				return this._SrcIp;
			}
			set
			{
				if ((this._SrcIp != value))
				{
					this.OnSrcIpChanging(value);
					this.SendPropertyChanging();
					this._SrcIp = value;
					this.SendPropertyChanged("SrcIp");
					this.OnSrcIpChanged();
				}
			}
		}
		
		[Column(Storage="_DstIp", DbType="VarChar(50)")]
		public string DstIp
		{
			get
			{
				return this._DstIp;
			}
			set
			{
				if ((this._DstIp != value))
				{
					this.OnDstIpChanging(value);
					this.SendPropertyChanging();
					this._DstIp = value;
					this.SendPropertyChanged("DstIp");
					this.OnDstIpChanged();
				}
			}
		}
		
		[Column(Storage="_FileSetID", DbType="BigInt")]
		public System.Nullable<long> FileSetID
		{
			get
			{
				return this._FileSetID;
			}
			set
			{
				if ((this._FileSetID != value))
				{
					this.OnFileSetIDChanging(value);
					this.SendPropertyChanging();
					this._FileSetID = value;
					this.SendPropertyChanged("FileSetID");
					this.OnFileSetIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemId", DbType="BigInt")]
		public System.Nullable<long> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(250)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NChar(10)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NChar(10)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_AuditMan", DbType="NChar(10)")]
		public string AuditMan
		{
			get
			{
				return this._AuditMan;
			}
			set
			{
				if ((this._AuditMan != value))
				{
					this.OnAuditManChanging(value);
					this.SendPropertyChanging();
					this._AuditMan = value;
					this.SendPropertyChanged("AuditMan");
					this.OnAuditManChanged();
				}
			}
		}
		
		[Column(Storage="_total", DbType="BigInt")]
		public System.Nullable<long> total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[Column(Storage="_downloaded", DbType="BigInt")]
		public System.Nullable<long> downloaded
		{
			get
			{
				return this._downloaded;
			}
			set
			{
				if ((this._downloaded != value))
				{
					this.OndownloadedChanging(value);
					this.SendPropertyChanging();
					this._downloaded = value;
					this.SendPropertyChanged("downloaded");
					this.OndownloadedChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_CmmitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CmmitDate
		{
			get
			{
				return this._CmmitDate;
			}
			set
			{
				if ((this._CmmitDate != value))
				{
					this.OnCmmitDateChanging(value);
					this.SendPropertyChanging();
					this._CmmitDate = value;
					this.SendPropertyChanged("CmmitDate");
					this.OnCmmitDateChanged();
				}
			}
		}
		
		[Column(Storage="_FinishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}
		
		[Column(Storage="_Ext1", DbType="VarChar(50)")]
		public string Ext1
		{
			get
			{
				return this._Ext1;
			}
			set
			{
				if ((this._Ext1 != value))
				{
					this.OnExt1Changing(value);
					this.SendPropertyChanging();
					this._Ext1 = value;
					this.SendPropertyChanged("Ext1");
					this.OnExt1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VidioNews")]
	public partial class VidioNews : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Context;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextChanging(string value);
    partial void OnContextChanged();
    #endregion
		
		public VidioNews()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Context", DbType="VarChar(500)")]
		public string Context
		{
			get
			{
				return this._Context;
			}
			set
			{
				if ((this._Context != value))
				{
					this.OnContextChanging(value);
					this.SendPropertyChanging();
					this._Context = value;
					this.SendPropertyChanged("Context");
					this.OnContextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
