//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3603
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.3603 版自动生成。
// 
#pragma warning disable 1591

namespace ManagementService.FT {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MasterControlSoap", Namespace="http://localhost/SM")]
    public partial class MasterControl : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CommitMovieOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryFileSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuditOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitCartoonOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitMusicOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitSoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveMovieOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCartoonOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveSoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveMusicOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFileSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMovieOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMusicOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCartoonOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishMovieOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishMusicOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishSoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishCartoonOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MasterControl() {
            this.Url = global::ManagementService.Properties.Settings.Default.ManagementService_FT_MasterControl;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CommitMovieCompletedEventHandler CommitMovieCompleted;
        
        /// <remarks/>
        public event QueryFileSetCompletedEventHandler QueryFileSetCompleted;
        
        /// <remarks/>
        public event AuditCompletedEventHandler AuditCompleted;
        
        /// <remarks/>
        public event CommitCartoonCompletedEventHandler CommitCartoonCompleted;
        
        /// <remarks/>
        public event CommitMusicCompletedEventHandler CommitMusicCompleted;
        
        /// <remarks/>
        public event CommitSoftCompletedEventHandler CommitSoftCompleted;
        
        /// <remarks/>
        public event RemoveMovieCompletedEventHandler RemoveMovieCompleted;
        
        /// <remarks/>
        public event RemoveCartoonCompletedEventHandler RemoveCartoonCompleted;
        
        /// <remarks/>
        public event RemoveSoftCompletedEventHandler RemoveSoftCompleted;
        
        /// <remarks/>
        public event RemoveMusicCompletedEventHandler RemoveMusicCompleted;
        
        /// <remarks/>
        public event UpdateFileSetCompletedEventHandler UpdateFileSetCompleted;
        
        /// <remarks/>
        public event UpdateMovieCompletedEventHandler UpdateMovieCompleted;
        
        /// <remarks/>
        public event UpdateMusicCompletedEventHandler UpdateMusicCompleted;
        
        /// <remarks/>
        public event UpdateCartoonCompletedEventHandler UpdateCartoonCompleted;
        
        /// <remarks/>
        public event UpdateSoftCompletedEventHandler UpdateSoftCompleted;
        
        /// <remarks/>
        public event PublishMovieCompletedEventHandler PublishMovieCompleted;
        
        /// <remarks/>
        public event PublishMusicCompletedEventHandler PublishMusicCompleted;
        
        /// <remarks/>
        public event PublishSoftCompletedEventHandler PublishSoftCompleted;
        
        /// <remarks/>
        public event PublishCartoonCompletedEventHandler PublishCartoonCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/CommitMovie", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CommitMovie(BaseItem baseInfo, Movie movieInfo, FileSet fset, string srcIp) {
            object[] results = this.Invoke("CommitMovie", new object[] {
                        baseInfo,
                        movieInfo,
                        fset,
                        srcIp});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CommitMovieAsync(BaseItem baseInfo, Movie movieInfo, FileSet fset, string srcIp) {
            this.CommitMovieAsync(baseInfo, movieInfo, fset, srcIp, null);
        }
        
        /// <remarks/>
        public void CommitMovieAsync(BaseItem baseInfo, Movie movieInfo, FileSet fset, string srcIp, object userState) {
            if ((this.CommitMovieOperationCompleted == null)) {
                this.CommitMovieOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitMovieOperationCompleted);
            }
            this.InvokeAsync("CommitMovie", new object[] {
                        baseInfo,
                        movieInfo,
                        fset,
                        srcIp}, this.CommitMovieOperationCompleted, userState);
        }
        
        private void OnCommitMovieOperationCompleted(object arg) {
            if ((this.CommitMovieCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitMovieCompleted(this, new CommitMovieCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/QueryFileSet", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FileSet QueryFileSet(long id) {
            object[] results = this.Invoke("QueryFileSet", new object[] {
                        id});
            return ((FileSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryFileSetAsync(long id) {
            this.QueryFileSetAsync(id, null);
        }
        
        /// <remarks/>
        public void QueryFileSetAsync(long id, object userState) {
            if ((this.QueryFileSetOperationCompleted == null)) {
                this.QueryFileSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryFileSetOperationCompleted);
            }
            this.InvokeAsync("QueryFileSet", new object[] {
                        id}, this.QueryFileSetOperationCompleted, userState);
        }
        
        private void OnQueryFileSetOperationCompleted(object arg) {
            if ((this.QueryFileSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryFileSetCompleted(this, new QueryFileSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/Audit", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Audit(long id, int rst, string reson, string audiMan) {
            this.Invoke("Audit", new object[] {
                        id,
                        rst,
                        reson,
                        audiMan});
        }
        
        /// <remarks/>
        public void AuditAsync(long id, int rst, string reson, string audiMan) {
            this.AuditAsync(id, rst, reson, audiMan, null);
        }
        
        /// <remarks/>
        public void AuditAsync(long id, int rst, string reson, string audiMan, object userState) {
            if ((this.AuditOperationCompleted == null)) {
                this.AuditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuditOperationCompleted);
            }
            this.InvokeAsync("Audit", new object[] {
                        id,
                        rst,
                        reson,
                        audiMan}, this.AuditOperationCompleted, userState);
        }
        
        private void OnAuditOperationCompleted(object arg) {
            if ((this.AuditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuditCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/CommitCartoon", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CommitCartoon(BaseItem baseInfo, Cartoon cartoonInfo, FileSet fset, string srcIp) {
            object[] results = this.Invoke("CommitCartoon", new object[] {
                        baseInfo,
                        cartoonInfo,
                        fset,
                        srcIp});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CommitCartoonAsync(BaseItem baseInfo, Cartoon cartoonInfo, FileSet fset, string srcIp) {
            this.CommitCartoonAsync(baseInfo, cartoonInfo, fset, srcIp, null);
        }
        
        /// <remarks/>
        public void CommitCartoonAsync(BaseItem baseInfo, Cartoon cartoonInfo, FileSet fset, string srcIp, object userState) {
            if ((this.CommitCartoonOperationCompleted == null)) {
                this.CommitCartoonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitCartoonOperationCompleted);
            }
            this.InvokeAsync("CommitCartoon", new object[] {
                        baseInfo,
                        cartoonInfo,
                        fset,
                        srcIp}, this.CommitCartoonOperationCompleted, userState);
        }
        
        private void OnCommitCartoonOperationCompleted(object arg) {
            if ((this.CommitCartoonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitCartoonCompleted(this, new CommitCartoonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/CommitMusic", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CommitMusic(BaseItem baseInfo, Music musicInfo, FileSet fset, string srcIp) {
            object[] results = this.Invoke("CommitMusic", new object[] {
                        baseInfo,
                        musicInfo,
                        fset,
                        srcIp});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CommitMusicAsync(BaseItem baseInfo, Music musicInfo, FileSet fset, string srcIp) {
            this.CommitMusicAsync(baseInfo, musicInfo, fset, srcIp, null);
        }
        
        /// <remarks/>
        public void CommitMusicAsync(BaseItem baseInfo, Music musicInfo, FileSet fset, string srcIp, object userState) {
            if ((this.CommitMusicOperationCompleted == null)) {
                this.CommitMusicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitMusicOperationCompleted);
            }
            this.InvokeAsync("CommitMusic", new object[] {
                        baseInfo,
                        musicInfo,
                        fset,
                        srcIp}, this.CommitMusicOperationCompleted, userState);
        }
        
        private void OnCommitMusicOperationCompleted(object arg) {
            if ((this.CommitMusicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitMusicCompleted(this, new CommitMusicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/CommitSoft", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CommitSoft(BaseItem baseInfo, Software softwarInfo, FileSet fset, string srcIp) {
            object[] results = this.Invoke("CommitSoft", new object[] {
                        baseInfo,
                        softwarInfo,
                        fset,
                        srcIp});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CommitSoftAsync(BaseItem baseInfo, Software softwarInfo, FileSet fset, string srcIp) {
            this.CommitSoftAsync(baseInfo, softwarInfo, fset, srcIp, null);
        }
        
        /// <remarks/>
        public void CommitSoftAsync(BaseItem baseInfo, Software softwarInfo, FileSet fset, string srcIp, object userState) {
            if ((this.CommitSoftOperationCompleted == null)) {
                this.CommitSoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitSoftOperationCompleted);
            }
            this.InvokeAsync("CommitSoft", new object[] {
                        baseInfo,
                        softwarInfo,
                        fset,
                        srcIp}, this.CommitSoftOperationCompleted, userState);
        }
        
        private void OnCommitSoftOperationCompleted(object arg) {
            if ((this.CommitSoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitSoftCompleted(this, new CommitSoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/RemoveMovie", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveMovie(long id) {
            this.Invoke("RemoveMovie", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void RemoveMovieAsync(long id) {
            this.RemoveMovieAsync(id, null);
        }
        
        /// <remarks/>
        public void RemoveMovieAsync(long id, object userState) {
            if ((this.RemoveMovieOperationCompleted == null)) {
                this.RemoveMovieOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMovieOperationCompleted);
            }
            this.InvokeAsync("RemoveMovie", new object[] {
                        id}, this.RemoveMovieOperationCompleted, userState);
        }
        
        private void OnRemoveMovieOperationCompleted(object arg) {
            if ((this.RemoveMovieCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMovieCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/RemoveCartoon", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveCartoon(long id) {
            this.Invoke("RemoveCartoon", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void RemoveCartoonAsync(long id) {
            this.RemoveCartoonAsync(id, null);
        }
        
        /// <remarks/>
        public void RemoveCartoonAsync(long id, object userState) {
            if ((this.RemoveCartoonOperationCompleted == null)) {
                this.RemoveCartoonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCartoonOperationCompleted);
            }
            this.InvokeAsync("RemoveCartoon", new object[] {
                        id}, this.RemoveCartoonOperationCompleted, userState);
        }
        
        private void OnRemoveCartoonOperationCompleted(object arg) {
            if ((this.RemoveCartoonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCartoonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/RemoveSoft", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveSoft(long id) {
            this.Invoke("RemoveSoft", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void RemoveSoftAsync(long id) {
            this.RemoveSoftAsync(id, null);
        }
        
        /// <remarks/>
        public void RemoveSoftAsync(long id, object userState) {
            if ((this.RemoveSoftOperationCompleted == null)) {
                this.RemoveSoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveSoftOperationCompleted);
            }
            this.InvokeAsync("RemoveSoft", new object[] {
                        id}, this.RemoveSoftOperationCompleted, userState);
        }
        
        private void OnRemoveSoftOperationCompleted(object arg) {
            if ((this.RemoveSoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveSoftCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/RemoveMusic", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveMusic(long id) {
            this.Invoke("RemoveMusic", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void RemoveMusicAsync(long id) {
            this.RemoveMusicAsync(id, null);
        }
        
        /// <remarks/>
        public void RemoveMusicAsync(long id, object userState) {
            if ((this.RemoveMusicOperationCompleted == null)) {
                this.RemoveMusicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMusicOperationCompleted);
            }
            this.InvokeAsync("RemoveMusic", new object[] {
                        id}, this.RemoveMusicOperationCompleted, userState);
        }
        
        private void OnRemoveMusicOperationCompleted(object arg) {
            if ((this.RemoveMusicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMusicCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/UpdateFileSet", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFileSet(long id, FileSet fs, string srcIp) {
            this.Invoke("UpdateFileSet", new object[] {
                        id,
                        fs,
                        srcIp});
        }
        
        /// <remarks/>
        public void UpdateFileSetAsync(long id, FileSet fs, string srcIp) {
            this.UpdateFileSetAsync(id, fs, srcIp, null);
        }
        
        /// <remarks/>
        public void UpdateFileSetAsync(long id, FileSet fs, string srcIp, object userState) {
            if ((this.UpdateFileSetOperationCompleted == null)) {
                this.UpdateFileSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileSetOperationCompleted);
            }
            this.InvokeAsync("UpdateFileSet", new object[] {
                        id,
                        fs,
                        srcIp}, this.UpdateFileSetOperationCompleted, userState);
        }
        
        private void OnUpdateFileSetOperationCompleted(object arg) {
            if ((this.UpdateFileSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileSetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/UpdateMovie", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMovie(BaseItem baseInfo, Movie movieInfo) {
            this.Invoke("UpdateMovie", new object[] {
                        baseInfo,
                        movieInfo});
        }
        
        /// <remarks/>
        public void UpdateMovieAsync(BaseItem baseInfo, Movie movieInfo) {
            this.UpdateMovieAsync(baseInfo, movieInfo, null);
        }
        
        /// <remarks/>
        public void UpdateMovieAsync(BaseItem baseInfo, Movie movieInfo, object userState) {
            if ((this.UpdateMovieOperationCompleted == null)) {
                this.UpdateMovieOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMovieOperationCompleted);
            }
            this.InvokeAsync("UpdateMovie", new object[] {
                        baseInfo,
                        movieInfo}, this.UpdateMovieOperationCompleted, userState);
        }
        
        private void OnUpdateMovieOperationCompleted(object arg) {
            if ((this.UpdateMovieCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMovieCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/UpdateMusic", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMusic(BaseItem baseInfo, Music musicInfo) {
            this.Invoke("UpdateMusic", new object[] {
                        baseInfo,
                        musicInfo});
        }
        
        /// <remarks/>
        public void UpdateMusicAsync(BaseItem baseInfo, Music musicInfo) {
            this.UpdateMusicAsync(baseInfo, musicInfo, null);
        }
        
        /// <remarks/>
        public void UpdateMusicAsync(BaseItem baseInfo, Music musicInfo, object userState) {
            if ((this.UpdateMusicOperationCompleted == null)) {
                this.UpdateMusicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMusicOperationCompleted);
            }
            this.InvokeAsync("UpdateMusic", new object[] {
                        baseInfo,
                        musicInfo}, this.UpdateMusicOperationCompleted, userState);
        }
        
        private void OnUpdateMusicOperationCompleted(object arg) {
            if ((this.UpdateMusicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMusicCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/UpdateCartoon", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCartoon(BaseItem baseInfo, Cartoon cartoonInfo) {
            this.Invoke("UpdateCartoon", new object[] {
                        baseInfo,
                        cartoonInfo});
        }
        
        /// <remarks/>
        public void UpdateCartoonAsync(BaseItem baseInfo, Cartoon cartoonInfo) {
            this.UpdateCartoonAsync(baseInfo, cartoonInfo, null);
        }
        
        /// <remarks/>
        public void UpdateCartoonAsync(BaseItem baseInfo, Cartoon cartoonInfo, object userState) {
            if ((this.UpdateCartoonOperationCompleted == null)) {
                this.UpdateCartoonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCartoonOperationCompleted);
            }
            this.InvokeAsync("UpdateCartoon", new object[] {
                        baseInfo,
                        cartoonInfo}, this.UpdateCartoonOperationCompleted, userState);
        }
        
        private void OnUpdateCartoonOperationCompleted(object arg) {
            if ((this.UpdateCartoonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCartoonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/UpdateSoft", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSoft(BaseItem baseInfo, Software softInfo) {
            this.Invoke("UpdateSoft", new object[] {
                        baseInfo,
                        softInfo});
        }
        
        /// <remarks/>
        public void UpdateSoftAsync(BaseItem baseInfo, Software softInfo) {
            this.UpdateSoftAsync(baseInfo, softInfo, null);
        }
        
        /// <remarks/>
        public void UpdateSoftAsync(BaseItem baseInfo, Software softInfo, object userState) {
            if ((this.UpdateSoftOperationCompleted == null)) {
                this.UpdateSoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSoftOperationCompleted);
            }
            this.InvokeAsync("UpdateSoft", new object[] {
                        baseInfo,
                        softInfo}, this.UpdateSoftOperationCompleted, userState);
        }
        
        private void OnUpdateSoftOperationCompleted(object arg) {
            if ((this.UpdateSoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSoftCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/PublishMovie", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PublishMovie(long id, string[] dst) {
            this.Invoke("PublishMovie", new object[] {
                        id,
                        dst});
        }
        
        /// <remarks/>
        public void PublishMovieAsync(long id, string[] dst) {
            this.PublishMovieAsync(id, dst, null);
        }
        
        /// <remarks/>
        public void PublishMovieAsync(long id, string[] dst, object userState) {
            if ((this.PublishMovieOperationCompleted == null)) {
                this.PublishMovieOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishMovieOperationCompleted);
            }
            this.InvokeAsync("PublishMovie", new object[] {
                        id,
                        dst}, this.PublishMovieOperationCompleted, userState);
        }
        
        private void OnPublishMovieOperationCompleted(object arg) {
            if ((this.PublishMovieCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishMovieCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/PublishMusic", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PublishMusic(long id, string[] dst) {
            this.Invoke("PublishMusic", new object[] {
                        id,
                        dst});
        }
        
        /// <remarks/>
        public void PublishMusicAsync(long id, string[] dst) {
            this.PublishMusicAsync(id, dst, null);
        }
        
        /// <remarks/>
        public void PublishMusicAsync(long id, string[] dst, object userState) {
            if ((this.PublishMusicOperationCompleted == null)) {
                this.PublishMusicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishMusicOperationCompleted);
            }
            this.InvokeAsync("PublishMusic", new object[] {
                        id,
                        dst}, this.PublishMusicOperationCompleted, userState);
        }
        
        private void OnPublishMusicOperationCompleted(object arg) {
            if ((this.PublishMusicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishMusicCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/PublishSoft", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PublishSoft(long id, string[] dst) {
            this.Invoke("PublishSoft", new object[] {
                        id,
                        dst});
        }
        
        /// <remarks/>
        public void PublishSoftAsync(long id, string[] dst) {
            this.PublishSoftAsync(id, dst, null);
        }
        
        /// <remarks/>
        public void PublishSoftAsync(long id, string[] dst, object userState) {
            if ((this.PublishSoftOperationCompleted == null)) {
                this.PublishSoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishSoftOperationCompleted);
            }
            this.InvokeAsync("PublishSoft", new object[] {
                        id,
                        dst}, this.PublishSoftOperationCompleted, userState);
        }
        
        private void OnPublishSoftOperationCompleted(object arg) {
            if ((this.PublishSoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishSoftCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/SM/PublishCartoon", RequestNamespace="http://localhost/SM", ResponseNamespace="http://localhost/SM", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PublishCartoon(long id, string[] dst) {
            this.Invoke("PublishCartoon", new object[] {
                        id,
                        dst});
        }
        
        /// <remarks/>
        public void PublishCartoonAsync(long id, string[] dst) {
            this.PublishCartoonAsync(id, dst, null);
        }
        
        /// <remarks/>
        public void PublishCartoonAsync(long id, string[] dst, object userState) {
            if ((this.PublishCartoonOperationCompleted == null)) {
                this.PublishCartoonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishCartoonOperationCompleted);
            }
            this.InvokeAsync("PublishCartoon", new object[] {
                        id,
                        dst}, this.PublishCartoonOperationCompleted, userState);
        }
        
        private void OnPublishCartoonOperationCompleted(object arg) {
            if ((this.PublishCartoonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishCartoonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/SM")]
    public partial class BaseItem {
        
        private long idField;
        
        private string ownerField;
        
        private string subCodeField;
        
        private System.DateTime birthField;
        
        private string titleField;
        
        private long categoryField;
        
        private long publishTypeField;
        
        private string issueDateField;
        
        private string briefField;
        
        private string ext1Field;
        
        private string ext2Field;
        
        private string ext3Field;
        
        private string ext4Field;
        
        private string ext5Field;
        
        private string ext6Field;
        
        private string ext7Field;
        
        private string ext8Field;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public string SubCode {
            get {
                return this.subCodeField;
            }
            set {
                this.subCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Birth {
            get {
                return this.birthField;
            }
            set {
                this.birthField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public long Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        public long PublishType {
            get {
                return this.publishTypeField;
            }
            set {
                this.publishTypeField = value;
            }
        }
        
        /// <remarks/>
        public string IssueDate {
            get {
                return this.issueDateField;
            }
            set {
                this.issueDateField = value;
            }
        }
        
        /// <remarks/>
        public string Brief {
            get {
                return this.briefField;
            }
            set {
                this.briefField = value;
            }
        }
        
        /// <remarks/>
        public string Ext1 {
            get {
                return this.ext1Field;
            }
            set {
                this.ext1Field = value;
            }
        }
        
        /// <remarks/>
        public string Ext2 {
            get {
                return this.ext2Field;
            }
            set {
                this.ext2Field = value;
            }
        }
        
        /// <remarks/>
        public string Ext3 {
            get {
                return this.ext3Field;
            }
            set {
                this.ext3Field = value;
            }
        }
        
        /// <remarks/>
        public string Ext4 {
            get {
                return this.ext4Field;
            }
            set {
                this.ext4Field = value;
            }
        }
        
        /// <remarks/>
        public string Ext5 {
            get {
                return this.ext5Field;
            }
            set {
                this.ext5Field = value;
            }
        }
        
        /// <remarks/>
        public string Ext6 {
            get {
                return this.ext6Field;
            }
            set {
                this.ext6Field = value;
            }
        }
        
        /// <remarks/>
        public string Ext7 {
            get {
                return this.ext7Field;
            }
            set {
                this.ext7Field = value;
            }
        }
        
        /// <remarks/>
        public string Ext8 {
            get {
                return this.ext8Field;
            }
            set {
                this.ext8Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/SM")]
    public partial class Software {
        
        private long idField;
        
        private string manufacturerField;
        
        private string versionField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/SM")]
    public partial class Music {
        
        private long idField;
        
        private string singerField;
        
        private string authorField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Singer {
            get {
                return this.singerField;
            }
            set {
                this.singerField = value;
            }
        }
        
        /// <remarks/>
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/SM")]
    public partial class Cartoon {
        
        private long idField;
        
        private string authorField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/FSM")]
    public partial class File {
        
        private long idField;
        
        private long fileSetIDField;
        
        private string fileNameField;
        
        private long sizeField;
        
        private int showIndexField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public long FileSetID {
            get {
                return this.fileSetIDField;
            }
            set {
                this.fileSetIDField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public long Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        public int ShowIndex {
            get {
                return this.showIndexField;
            }
            set {
                this.showIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/FSM")]
    public partial class FileSet {
        
        private long idField;
        
        private string pathField;
        
        private bool readyField;
        
        private File[] fileField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public bool Ready {
            get {
                return this.readyField;
            }
            set {
                this.readyField = value;
            }
        }
        
        /// <remarks/>
        public File[] File {
            get {
                return this.fileField;
            }
            set {
                this.fileField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://localhost/SM")]
    public partial class Movie {
        
        private long idField;
        
        private string playerField;
        
        private string directorField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Player {
            get {
                return this.playerField;
            }
            set {
                this.playerField = value;
            }
        }
        
        /// <remarks/>
        public string Director {
            get {
                return this.directorField;
            }
            set {
                this.directorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CommitMovieCompletedEventHandler(object sender, CommitMovieCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitMovieCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitMovieCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void QueryFileSetCompletedEventHandler(object sender, QueryFileSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryFileSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryFileSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AuditCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CommitCartoonCompletedEventHandler(object sender, CommitCartoonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitCartoonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitCartoonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CommitMusicCompletedEventHandler(object sender, CommitMusicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitMusicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitMusicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CommitSoftCompletedEventHandler(object sender, CommitSoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitSoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitSoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RemoveMovieCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RemoveCartoonCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RemoveSoftCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RemoveMusicCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateFileSetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateMovieCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateMusicCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateCartoonCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateSoftCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void PublishMovieCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void PublishMusicCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void PublishSoftCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void PublishCartoonCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591