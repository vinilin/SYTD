#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShareBrowse
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ShareBrowse")]
	public partial class ShareBrowseDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBaseItem(BaseItem instance);
    partial void UpdateBaseItem(BaseItem instance);
    partial void DeleteBaseItem(BaseItem instance);
    partial void InsertFileItem(FileItem instance);
    partial void UpdateFileItem(FileItem instance);
    partial void DeleteFileItem(FileItem instance);
    partial void InsertPublishType(PublishType instance);
    partial void UpdatePublishType(PublishType instance);
    partial void DeletePublishType(PublishType instance);
    #endregion
		
		public ShareBrowseDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ShareBrowseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ShareBrowseDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShareBrowseDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShareBrowseDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShareBrowseDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BaseItem> BaseItem
		{
			get
			{
				return this.GetTable<BaseItem>();
			}
		}
		
		public System.Data.Linq.Table<FileItem> FileItem
		{
			get
			{
				return this.GetTable<FileItem>();
			}
		}
		
		public System.Data.Linq.Table<PublishType> PublishType
		{
			get
			{
				return this.GetTable<PublishType>();
			}
		}
		
		public System.Data.Linq.Table<Software> Software
		{
			get
			{
				return this.GetTable<Software>();
			}
		}
		
		public System.Data.Linq.Table<Cartoon> Cartoon
		{
			get
			{
				return this.GetTable<Cartoon>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movie
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<Music> Music
		{
			get
			{
				return this.GetTable<Music>();
			}
		}
	}
	
	[Table(Name="dbo.BaseItem")]
	public partial class BaseItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _Owner;
		
		private System.DateTime _Birth;
		
		private string _Title;
		
		private long _Category;
		
		private long _PublishType;
		
		private System.DateTime _IssueDate;
		
		private string _Brief;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnOwnerChanging(long value);
    partial void OnOwnerChanged();
    partial void OnBirthChanging(System.DateTime value);
    partial void OnBirthChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCategoryChanging(long value);
    partial void OnCategoryChanged();
    partial void OnPublishTypeChanging(long value);
    partial void OnPublishTypeChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    partial void OnBriefChanging(string value);
    partial void OnBriefChanged();
    #endregion
		
		public BaseItem()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="BigInt NOT NULL")]
		public long Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_Birth", DbType="DateTime NOT NULL")]
		public System.DateTime Birth
		{
			get
			{
				return this._Birth;
			}
			set
			{
				if ((this._Birth != value))
				{
					this.OnBirthChanging(value);
					this.SendPropertyChanging();
					this._Birth = value;
					this.SendPropertyChanged("Birth");
					this.OnBirthChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="BigInt NOT NULL")]
		public long Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_PublishType", DbType="BigInt NOT NULL")]
		public long PublishType
		{
			get
			{
				return this._PublishType;
			}
			set
			{
				if ((this._PublishType != value))
				{
					this.OnPublishTypeChanging(value);
					this.SendPropertyChanging();
					this._PublishType = value;
					this.SendPropertyChanged("PublishType");
					this.OnPublishTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IssueDate", DbType="DateTime NOT NULL")]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[Column(Storage="_Brief", DbType="VarChar(2048) NOT NULL", CanBeNull=false)]
		public string Brief
		{
			get
			{
				return this._Brief;
			}
			set
			{
				if ((this._Brief != value))
				{
					this.OnBriefChanging(value);
					this.SendPropertyChanging();
					this._Brief = value;
					this.SendPropertyChanged("Brief");
					this.OnBriefChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FileItem")]
	public partial class FileItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _FileSetID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnFileSetIDChanging(long value);
    partial void OnFileSetIDChanged();
    #endregion
		
		public FileItem()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileSetID", DbType="BigInt NOT NULL")]
		public long FileSetID
		{
			get
			{
				return this._FileSetID;
			}
			set
			{
				if ((this._FileSetID != value))
				{
					this.OnFileSetIDChanging(value);
					this.SendPropertyChanging();
					this._FileSetID = value;
					this.SendPropertyChanged("FileSetID");
					this.OnFileSetIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PublishType")]
	public partial class PublishType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _Category;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCategoryChanging(long value);
    partial void OnCategoryChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PublishType()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="BigInt NOT NULL")]
		public long Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BaseItem")]
	public partial class Software
	{
		
		private string _Manufacturer;
		
		private string _Version;
		
		public Software()
		{
		}
		
		[Column(Storage="_Manufacturer", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this._Manufacturer = value;
				}
			}
		}
		
		[Column(Storage="_Version", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BaseItem")]
	public partial class Cartoon
	{
		
		private string _Author;
		
		public Cartoon()
		{
		}
		
		[Column(Storage="_Author", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this._Author = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BaseItem")]
	public partial class Movie
	{
		
		private string _Player;
		
		private string _Director;
		
		public Movie()
		{
		}
		
		[Column(Storage="_Player", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Player
		{
			get
			{
				return this._Player;
			}
			set
			{
				if ((this._Player != value))
				{
					this._Player = value;
				}
			}
		}
		
		[Column(Storage="_Director", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Director
		{
			get
			{
				return this._Director;
			}
			set
			{
				if ((this._Director != value))
				{
					this._Director = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BaseItem")]
	public partial class Music
	{
		
		private string _Singer;
		
		private string _Author;
		
		public Music()
		{
		}
		
		[Column(Storage="_Singer", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Singer
		{
			get
			{
				return this._Singer;
			}
			set
			{
				if ((this._Singer != value))
				{
					this._Singer = value;
				}
			}
		}
		
		[Column(Storage="_Author", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this._Author = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
