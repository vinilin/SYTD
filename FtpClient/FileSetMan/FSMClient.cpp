/* FSMClient.cpp
   Generated by gSOAP 2.7.14 from FileSetMan.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "FSMH.h"

namespace FSM {

SOAP_SOURCE_STAMP("@(#) FSMClient.cpp ver 2.7.14 2010-01-24 12:17:23 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns2__CreateFileSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateFileSet *ns1__CreateFileSet, _ns1__CreateFileSetResponse *ns1__CreateFileSetResponse)
{	struct __ns2__CreateFileSet soap_tmp___ns2__CreateFileSet;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/CreateFileSet";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CreateFileSet.ns1__CreateFileSet = ns1__CreateFileSet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__CreateFileSet(soap, &soap_tmp___ns2__CreateFileSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__CreateFileSet(soap, &soap_tmp___ns2__CreateFileSet, "-ns2:CreateFileSet", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__CreateFileSet(soap, &soap_tmp___ns2__CreateFileSet, "-ns2:CreateFileSet", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateFileSetResponse)
		return soap_closesock(soap);
	ns1__CreateFileSetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateFileSetResponse->soap_get(soap, "ns1:CreateFileSetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns2__QureyFileSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QureyFileSet *ns1__QureyFileSet, _ns1__QureyFileSetResponse *ns1__QureyFileSetResponse)
{	struct __ns2__QureyFileSet soap_tmp___ns2__QureyFileSet;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/QureyFileSet";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__QureyFileSet.ns1__QureyFileSet = ns1__QureyFileSet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__QureyFileSet(soap, &soap_tmp___ns2__QureyFileSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__QureyFileSet(soap, &soap_tmp___ns2__QureyFileSet, "-ns2:QureyFileSet", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__QureyFileSet(soap, &soap_tmp___ns2__QureyFileSet, "-ns2:QureyFileSet", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QureyFileSetResponse)
		return soap_closesock(soap);
	ns1__QureyFileSetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QureyFileSetResponse->soap_get(soap, "ns1:QureyFileSetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns2__DeleteFileSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DeleteFileSet *ns1__DeleteFileSet, _ns1__DeleteFileSetResponse *ns1__DeleteFileSetResponse)
{	struct __ns2__DeleteFileSet soap_tmp___ns2__DeleteFileSet;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/DeleteFileSet";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__DeleteFileSet.ns1__DeleteFileSet = ns1__DeleteFileSet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__DeleteFileSet(soap, &soap_tmp___ns2__DeleteFileSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__DeleteFileSet(soap, &soap_tmp___ns2__DeleteFileSet, "-ns2:DeleteFileSet", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__DeleteFileSet(soap, &soap_tmp___ns2__DeleteFileSet, "-ns2:DeleteFileSet", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteFileSetResponse)
		return soap_closesock(soap);
	ns1__DeleteFileSetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteFileSetResponse->soap_get(soap, "ns1:DeleteFileSetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns2__CommitFileSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CommitFileSet *ns1__CommitFileSet, _ns1__CommitFileSetResponse *ns1__CommitFileSetResponse)
{	struct __ns2__CommitFileSet soap_tmp___ns2__CommitFileSet;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/CommitFileSet";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CommitFileSet.ns1__CommitFileSet = ns1__CommitFileSet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__CommitFileSet(soap, &soap_tmp___ns2__CommitFileSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__CommitFileSet(soap, &soap_tmp___ns2__CommitFileSet, "-ns2:CommitFileSet", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__CommitFileSet(soap, &soap_tmp___ns2__CommitFileSet, "-ns2:CommitFileSet", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CommitFileSetResponse)
		return soap_closesock(soap);
	ns1__CommitFileSetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CommitFileSetResponse->soap_get(soap, "ns1:CommitFileSetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns2__ProgressNotify(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ProgressNotify *ns1__ProgressNotify, _ns1__ProgressNotifyResponse *ns1__ProgressNotifyResponse)
{	struct __ns2__ProgressNotify soap_tmp___ns2__ProgressNotify;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/ProgressNotify";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__ProgressNotify.ns1__ProgressNotify = ns1__ProgressNotify;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__ProgressNotify(soap, &soap_tmp___ns2__ProgressNotify);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__ProgressNotify(soap, &soap_tmp___ns2__ProgressNotify, "-ns2:ProgressNotify", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__ProgressNotify(soap, &soap_tmp___ns2__ProgressNotify, "-ns2:ProgressNotify", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ProgressNotifyResponse)
		return soap_closesock(soap);
	ns1__ProgressNotifyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ProgressNotifyResponse->soap_get(soap, "ns1:ProgressNotifyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns2__CommitFile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CommitFile *ns1__CommitFile, _ns1__CommitFileResponse *ns1__CommitFileResponse)
{	struct __ns2__CommitFile soap_tmp___ns2__CommitFile;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/CommitFile";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CommitFile.ns1__CommitFile = ns1__CommitFile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__CommitFile(soap, &soap_tmp___ns2__CommitFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__CommitFile(soap, &soap_tmp___ns2__CommitFile, "-ns2:CommitFile", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__CommitFile(soap, &soap_tmp___ns2__CommitFile, "-ns2:CommitFile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CommitFileResponse)
		return soap_closesock(soap);
	ns1__CommitFileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CommitFileResponse->soap_get(soap, "ns1:CommitFileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns2__CommitError(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CommitError *ns1__CommitError, _ns1__CommitErrorResponse *ns1__CommitErrorResponse)
{	struct __ns2__CommitError soap_tmp___ns2__CommitError;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/CommitError";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CommitError.ns1__CommitError = ns1__CommitError;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__CommitError(soap, &soap_tmp___ns2__CommitError);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__CommitError(soap, &soap_tmp___ns2__CommitError, "-ns2:CommitError", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__CommitError(soap, &soap_tmp___ns2__CommitError, "-ns2:CommitError", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CommitErrorResponse)
		return soap_closesock(soap);
	ns1__CommitErrorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CommitErrorResponse->soap_get(soap, "ns1:CommitErrorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__CreateFileSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CreateFileSet *ns1__CreateFileSet, _ns1__CreateFileSetResponse *ns1__CreateFileSetResponse)
{	struct __ns3__CreateFileSet soap_tmp___ns3__CreateFileSet;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/CreateFileSet";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__CreateFileSet.ns1__CreateFileSet = ns1__CreateFileSet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__CreateFileSet(soap, &soap_tmp___ns3__CreateFileSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__CreateFileSet(soap, &soap_tmp___ns3__CreateFileSet, "-ns3:CreateFileSet", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__CreateFileSet(soap, &soap_tmp___ns3__CreateFileSet, "-ns3:CreateFileSet", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CreateFileSetResponse)
		return soap_closesock(soap);
	ns1__CreateFileSetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CreateFileSetResponse->soap_get(soap, "ns1:CreateFileSetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__QureyFileSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__QureyFileSet *ns1__QureyFileSet, _ns1__QureyFileSetResponse *ns1__QureyFileSetResponse)
{	struct __ns3__QureyFileSet soap_tmp___ns3__QureyFileSet;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/QureyFileSet";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__QureyFileSet.ns1__QureyFileSet = ns1__QureyFileSet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__QureyFileSet(soap, &soap_tmp___ns3__QureyFileSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__QureyFileSet(soap, &soap_tmp___ns3__QureyFileSet, "-ns3:QureyFileSet", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__QureyFileSet(soap, &soap_tmp___ns3__QureyFileSet, "-ns3:QureyFileSet", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__QureyFileSetResponse)
		return soap_closesock(soap);
	ns1__QureyFileSetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QureyFileSetResponse->soap_get(soap, "ns1:QureyFileSetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__DeleteFileSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__DeleteFileSet *ns1__DeleteFileSet, _ns1__DeleteFileSetResponse *ns1__DeleteFileSetResponse)
{	struct __ns3__DeleteFileSet soap_tmp___ns3__DeleteFileSet;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/DeleteFileSet";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DeleteFileSet.ns1__DeleteFileSet = ns1__DeleteFileSet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DeleteFileSet(soap, &soap_tmp___ns3__DeleteFileSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DeleteFileSet(soap, &soap_tmp___ns3__DeleteFileSet, "-ns3:DeleteFileSet", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DeleteFileSet(soap, &soap_tmp___ns3__DeleteFileSet, "-ns3:DeleteFileSet", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__DeleteFileSetResponse)
		return soap_closesock(soap);
	ns1__DeleteFileSetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DeleteFileSetResponse->soap_get(soap, "ns1:DeleteFileSetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__CommitFileSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CommitFileSet *ns1__CommitFileSet, _ns1__CommitFileSetResponse *ns1__CommitFileSetResponse)
{	struct __ns3__CommitFileSet soap_tmp___ns3__CommitFileSet;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/CommitFileSet";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__CommitFileSet.ns1__CommitFileSet = ns1__CommitFileSet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__CommitFileSet(soap, &soap_tmp___ns3__CommitFileSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__CommitFileSet(soap, &soap_tmp___ns3__CommitFileSet, "-ns3:CommitFileSet", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__CommitFileSet(soap, &soap_tmp___ns3__CommitFileSet, "-ns3:CommitFileSet", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CommitFileSetResponse)
		return soap_closesock(soap);
	ns1__CommitFileSetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CommitFileSetResponse->soap_get(soap, "ns1:CommitFileSetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__ProgressNotify(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ProgressNotify *ns1__ProgressNotify, _ns1__ProgressNotifyResponse *ns1__ProgressNotifyResponse)
{	struct __ns3__ProgressNotify soap_tmp___ns3__ProgressNotify;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/ProgressNotify";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__ProgressNotify.ns1__ProgressNotify = ns1__ProgressNotify;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__ProgressNotify(soap, &soap_tmp___ns3__ProgressNotify);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__ProgressNotify(soap, &soap_tmp___ns3__ProgressNotify, "-ns3:ProgressNotify", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__ProgressNotify(soap, &soap_tmp___ns3__ProgressNotify, "-ns3:ProgressNotify", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ProgressNotifyResponse)
		return soap_closesock(soap);
	ns1__ProgressNotifyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ProgressNotifyResponse->soap_get(soap, "ns1:ProgressNotifyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__CommitFile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CommitFile *ns1__CommitFile, _ns1__CommitFileResponse *ns1__CommitFileResponse)
{	struct __ns3__CommitFile soap_tmp___ns3__CommitFile;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/CommitFile";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__CommitFile.ns1__CommitFile = ns1__CommitFile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__CommitFile(soap, &soap_tmp___ns3__CommitFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__CommitFile(soap, &soap_tmp___ns3__CommitFile, "-ns3:CommitFile", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__CommitFile(soap, &soap_tmp___ns3__CommitFile, "-ns3:CommitFile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CommitFileResponse)
		return soap_closesock(soap);
	ns1__CommitFileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CommitFileResponse->soap_get(soap, "ns1:CommitFileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns3__CommitError(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CommitError *ns1__CommitError, _ns1__CommitErrorResponse *ns1__CommitErrorResponse)
{	struct __ns3__CommitError soap_tmp___ns3__CommitError;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/FSM/FileSetman.asmx";
	if (!soap_action)
		soap_action = "http://localhost/FSM/CommitError";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__CommitError.ns1__CommitError = ns1__CommitError;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__CommitError(soap, &soap_tmp___ns3__CommitError);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__CommitError(soap, &soap_tmp___ns3__CommitError, "-ns3:CommitError", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__CommitError(soap, &soap_tmp___ns3__CommitError, "-ns3:CommitError", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CommitErrorResponse)
		return soap_closesock(soap);
	ns1__CommitErrorResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CommitErrorResponse->soap_get(soap, "ns1:CommitErrorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

} // namespace FSM


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of FSMClient.cpp */
