/* FSMStub.h
   Generated by gSOAP 2.7.14 from FileSetMan.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef FSMStub_H
#define FSMStub_H
#include <vector>
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"

namespace FSM {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_FSM_ns1__FileSet
#define SOAP_TYPE_FSM_ns1__FileSet (8)
/* ns1:FileSet */
class SOAP_CMAC ns1__FileSet
{
public:
	LONG64 ID;	/* required element of type xsd:long */
	std::string *Path;	/* optional element of type xsd:string */
	bool Ready;	/* required element of type xsd:boolean */
	class ns1__ArrayOfFile *File;	/* optional element of type ns1:ArrayOfFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_FSM_ns1__FileSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__FileSet() : ID(0), Path(NULL), Ready((bool)0), File(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__FileSet() { }
};
#endif

#ifndef SOAP_TYPE_FSM_ns1__ArrayOfFile
#define SOAP_TYPE_FSM_ns1__ArrayOfFile (9)
/* ns1:ArrayOfFile */
class SOAP_CMAC ns1__ArrayOfFile
{
public:
	std::vector<class ns1__File * >File;	/* optional element of type ns1:File */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_FSM_ns1__ArrayOfFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfFile() : soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__ArrayOfFile() { }
};
#endif

#ifndef SOAP_TYPE_FSM_ns1__File
#define SOAP_TYPE_FSM_ns1__File (10)
/* ns1:File */
class SOAP_CMAC ns1__File
{
public:
	LONG64 ID;	/* required element of type xsd:long */
	LONG64 FileSetID;	/* required element of type xsd:long */
	std::string *FileName;	/* optional element of type xsd:string */
	LONG64 Size;	/* required element of type xsd:long */
	int ShowIndex;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_FSM_ns1__File */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__File() : ID(0), FileSetID(0), FileName(NULL), Size(0), ShowIndex(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~ns1__File() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__CreateFileSet
#define SOAP_TYPE_FSM__ns1__CreateFileSet (11)
/* ns1:CreateFileSet */
class SOAP_CMAC _ns1__CreateFileSet
{
public:
	ns1__FileSet *fset;	/* optional element of type ns1:FileSet */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_FSM__ns1__CreateFileSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateFileSet() : fset(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__CreateFileSet() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__CreateFileSetResponse
#define SOAP_TYPE_FSM__ns1__CreateFileSetResponse (12)
/* ns1:CreateFileSetResponse */
class SOAP_CMAC _ns1__CreateFileSetResponse
{
public:
	LONG64 CreateFileSetResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_FSM__ns1__CreateFileSetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CreateFileSetResponse() : CreateFileSetResult(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__CreateFileSetResponse() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__QureyFileSet
#define SOAP_TYPE_FSM__ns1__QureyFileSet (13)
/* ns1:QureyFileSet */
class SOAP_CMAC _ns1__QureyFileSet
{
public:
	LONG64 id;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_FSM__ns1__QureyFileSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QureyFileSet() : id(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__QureyFileSet() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__QureyFileSetResponse
#define SOAP_TYPE_FSM__ns1__QureyFileSetResponse (14)
/* ns1:QureyFileSetResponse */
class SOAP_CMAC _ns1__QureyFileSetResponse
{
public:
	ns1__FileSet *QureyFileSetResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:FileSet */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_FSM__ns1__QureyFileSetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QureyFileSetResponse() : QureyFileSetResult(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__QureyFileSetResponse() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__DeleteFileSet
#define SOAP_TYPE_FSM__ns1__DeleteFileSet (15)
/* ns1:DeleteFileSet */
class SOAP_CMAC _ns1__DeleteFileSet
{
public:
	LONG64 id;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_FSM__ns1__DeleteFileSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteFileSet() : id(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__DeleteFileSet() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__DeleteFileSetResponse
#define SOAP_TYPE_FSM__ns1__DeleteFileSetResponse (16)
/* ns1:DeleteFileSetResponse */
class SOAP_CMAC _ns1__DeleteFileSetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_FSM__ns1__DeleteFileSetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__DeleteFileSetResponse() : soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__DeleteFileSetResponse() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__CommitFileSet
#define SOAP_TYPE_FSM__ns1__CommitFileSet (17)
/* ns1:CommitFileSet */
class SOAP_CMAC _ns1__CommitFileSet
{
public:
	LONG64 id;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_FSM__ns1__CommitFileSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CommitFileSet() : id(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__CommitFileSet() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__CommitFileSetResponse
#define SOAP_TYPE_FSM__ns1__CommitFileSetResponse (18)
/* ns1:CommitFileSetResponse */
class SOAP_CMAC _ns1__CommitFileSetResponse
{
public:
	int CommitFileSetResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_FSM__ns1__CommitFileSetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CommitFileSetResponse() : CommitFileSetResult(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__CommitFileSetResponse() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__ProgressNotify
#define SOAP_TYPE_FSM__ns1__ProgressNotify (19)
/* ns1:ProgressNotify */
class SOAP_CMAC _ns1__ProgressNotify
{
public:
	LONG64 id;	/* required element of type xsd:long */
	LONG64 total;	/* required element of type xsd:long */
	LONG64 downloaded;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_FSM__ns1__ProgressNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ProgressNotify() : id(0), total(0), downloaded(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__ProgressNotify() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__ProgressNotifyResponse
#define SOAP_TYPE_FSM__ns1__ProgressNotifyResponse (20)
/* ns1:ProgressNotifyResponse */
class SOAP_CMAC _ns1__ProgressNotifyResponse
{
public:
	int ProgressNotifyResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_FSM__ns1__ProgressNotifyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ProgressNotifyResponse() : ProgressNotifyResult(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__ProgressNotifyResponse() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__CommitFile
#define SOAP_TYPE_FSM__ns1__CommitFile (21)
/* ns1:CommitFile */
class SOAP_CMAC _ns1__CommitFile
{
public:
	LONG64 fsid;	/* required element of type xsd:long */
	LONG64 fid;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_FSM__ns1__CommitFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CommitFile() : fsid(0), fid(0), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__CommitFile() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__CommitFileResponse
#define SOAP_TYPE_FSM__ns1__CommitFileResponse (22)
/* ns1:CommitFileResponse */
class SOAP_CMAC _ns1__CommitFileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_FSM__ns1__CommitFileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CommitFileResponse() : soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__CommitFileResponse() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__CommitError
#define SOAP_TYPE_FSM__ns1__CommitError (23)
/* ns1:CommitError */
class SOAP_CMAC _ns1__CommitError
{
public:
	std::string *msg;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_FSM__ns1__CommitError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CommitError() : msg(NULL), soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__CommitError() { }
};
#endif

#ifndef SOAP_TYPE_FSM__ns1__CommitErrorResponse
#define SOAP_TYPE_FSM__ns1__CommitErrorResponse (24)
/* ns1:CommitErrorResponse */
class SOAP_CMAC _ns1__CommitErrorResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_FSM__ns1__CommitErrorResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__CommitErrorResponse() : soap(NULL) { this->soap_default(NULL); }
	virtual ~_ns1__CommitErrorResponse() { }
};
#endif

#ifndef SOAP_TYPE_FSM___ns2__CreateFileSet
#define SOAP_TYPE_FSM___ns2__CreateFileSet (37)
/* Operation wrapper: */
struct __ns2__CreateFileSet
{
public:
	_ns1__CreateFileSet *ns1__CreateFileSet;	/* optional element of type ns1:CreateFileSet */
};
#endif

#ifndef SOAP_TYPE_FSM___ns2__QureyFileSet
#define SOAP_TYPE_FSM___ns2__QureyFileSet (41)
/* Operation wrapper: */
struct __ns2__QureyFileSet
{
public:
	_ns1__QureyFileSet *ns1__QureyFileSet;	/* optional element of type ns1:QureyFileSet */
};
#endif

#ifndef SOAP_TYPE_FSM___ns2__DeleteFileSet
#define SOAP_TYPE_FSM___ns2__DeleteFileSet (45)
/* Operation wrapper: */
struct __ns2__DeleteFileSet
{
public:
	_ns1__DeleteFileSet *ns1__DeleteFileSet;	/* optional element of type ns1:DeleteFileSet */
};
#endif

#ifndef SOAP_TYPE_FSM___ns2__CommitFileSet
#define SOAP_TYPE_FSM___ns2__CommitFileSet (49)
/* Operation wrapper: */
struct __ns2__CommitFileSet
{
public:
	_ns1__CommitFileSet *ns1__CommitFileSet;	/* optional element of type ns1:CommitFileSet */
};
#endif

#ifndef SOAP_TYPE_FSM___ns2__ProgressNotify
#define SOAP_TYPE_FSM___ns2__ProgressNotify (53)
/* Operation wrapper: */
struct __ns2__ProgressNotify
{
public:
	_ns1__ProgressNotify *ns1__ProgressNotify;	/* optional element of type ns1:ProgressNotify */
};
#endif

#ifndef SOAP_TYPE_FSM___ns2__CommitFile
#define SOAP_TYPE_FSM___ns2__CommitFile (57)
/* Operation wrapper: */
struct __ns2__CommitFile
{
public:
	_ns1__CommitFile *ns1__CommitFile;	/* optional element of type ns1:CommitFile */
};
#endif

#ifndef SOAP_TYPE_FSM___ns2__CommitError
#define SOAP_TYPE_FSM___ns2__CommitError (61)
/* Operation wrapper: */
struct __ns2__CommitError
{
public:
	_ns1__CommitError *ns1__CommitError;	/* optional element of type ns1:CommitError */
};
#endif

#ifndef SOAP_TYPE_FSM___ns3__CreateFileSet
#define SOAP_TYPE_FSM___ns3__CreateFileSet (63)
/* Operation wrapper: */
struct __ns3__CreateFileSet
{
public:
	_ns1__CreateFileSet *ns1__CreateFileSet;	/* optional element of type ns1:CreateFileSet */
};
#endif

#ifndef SOAP_TYPE_FSM___ns3__QureyFileSet
#define SOAP_TYPE_FSM___ns3__QureyFileSet (65)
/* Operation wrapper: */
struct __ns3__QureyFileSet
{
public:
	_ns1__QureyFileSet *ns1__QureyFileSet;	/* optional element of type ns1:QureyFileSet */
};
#endif

#ifndef SOAP_TYPE_FSM___ns3__DeleteFileSet
#define SOAP_TYPE_FSM___ns3__DeleteFileSet (67)
/* Operation wrapper: */
struct __ns3__DeleteFileSet
{
public:
	_ns1__DeleteFileSet *ns1__DeleteFileSet;	/* optional element of type ns1:DeleteFileSet */
};
#endif

#ifndef SOAP_TYPE_FSM___ns3__CommitFileSet
#define SOAP_TYPE_FSM___ns3__CommitFileSet (69)
/* Operation wrapper: */
struct __ns3__CommitFileSet
{
public:
	_ns1__CommitFileSet *ns1__CommitFileSet;	/* optional element of type ns1:CommitFileSet */
};
#endif

#ifndef SOAP_TYPE_FSM___ns3__ProgressNotify
#define SOAP_TYPE_FSM___ns3__ProgressNotify (71)
/* Operation wrapper: */
struct __ns3__ProgressNotify
{
public:
	_ns1__ProgressNotify *ns1__ProgressNotify;	/* optional element of type ns1:ProgressNotify */
};
#endif

#ifndef SOAP_TYPE_FSM___ns3__CommitFile
#define SOAP_TYPE_FSM___ns3__CommitFile (73)
/* Operation wrapper: */
struct __ns3__CommitFile
{
public:
	_ns1__CommitFile *ns1__CommitFile;	/* optional element of type ns1:CommitFile */
};
#endif

#ifndef SOAP_TYPE_FSM___ns3__CommitError
#define SOAP_TYPE_FSM___ns3__CommitError (75)
/* Operation wrapper: */
struct __ns3__CommitError
{
public:
	_ns1__CommitError *ns1__CommitError;	/* optional element of type ns1:CommitError */
};
#endif

#ifndef SOAP_TYPE_FSM_SOAP_ENV__Header
#define SOAP_TYPE_FSM_SOAP_ENV__Header (76)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_FSM_SOAP_ENV__Code
#define SOAP_TYPE_FSM_SOAP_ENV__Code (77)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_FSM_SOAP_ENV__Detail
#define SOAP_TYPE_FSM_SOAP_ENV__Detail (79)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_FSM_SOAP_ENV__Reason
#define SOAP_TYPE_FSM_SOAP_ENV__Reason (82)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_FSM_SOAP_ENV__Fault
#define SOAP_TYPE_FSM_SOAP_ENV__Fault (83)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_FSM__QName
#define SOAP_TYPE_FSM__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_FSM__XML
#define SOAP_TYPE_FSM__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace FSM


#endif

/* End of FSMStub.h */
