/* FSMFileSetManSoapService.h
   Generated by gSOAP 2.7.14 from FileSetMan.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef FSMFileSetManSoapService_H
#define FSMFileSetManSoapService_H
#include "FSMH.h"

namespace FSM {
class SOAP_CMAC FileSetManSoapService : public soap
{ public:
	/// Constructor
	FileSetManSoapService();
	/// Constructor with copy of another engine state
	FileSetManSoapService(const struct soap&);
	/// Constructor with engine input+output mode control
	FileSetManSoapService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	FileSetManSoapService(soap_mode imode, soap_mode omode);
	/// Destructor frees all data
	virtual ~FileSetManSoapService();
	/// Initializer used by constructor
	virtual	void FileSetManSoapService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	FileSetManSoapService *copy();
	/// Force close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Run simple single-thread iterative service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error code or SOAP_OK)
	virtual	int dispatch();

	///
	/// Service operations (you should define these):
	///

	/// Web service operation 'CreateFileSet' (returns error code or SOAP_OK)
	virtual	int CreateFileSet(_ns1__CreateFileSet *ns1__CreateFileSet, _ns1__CreateFileSetResponse *ns1__CreateFileSetResponse);

	/// Web service operation 'QureyFileSet' (returns error code or SOAP_OK)
	virtual	int QureyFileSet(_ns1__QureyFileSet *ns1__QureyFileSet, _ns1__QureyFileSetResponse *ns1__QureyFileSetResponse);

	/// Web service operation 'DeleteFileSet' (returns error code or SOAP_OK)
	virtual	int DeleteFileSet(_ns1__DeleteFileSet *ns1__DeleteFileSet, _ns1__DeleteFileSetResponse *ns1__DeleteFileSetResponse);

	/// Web service operation 'CommitFileSet' (returns error code or SOAP_OK)
	virtual	int CommitFileSet(_ns1__CommitFileSet *ns1__CommitFileSet, _ns1__CommitFileSetResponse *ns1__CommitFileSetResponse);

	/// Web service operation 'ProgressNotify' (returns error code or SOAP_OK)
	virtual	int ProgressNotify(_ns1__ProgressNotify *ns1__ProgressNotify, _ns1__ProgressNotifyResponse *ns1__ProgressNotifyResponse);

	/// Web service operation 'CommitFile' (returns error code or SOAP_OK)
	virtual	int CommitFile(_ns1__CommitFile *ns1__CommitFile, _ns1__CommitFileResponse *ns1__CommitFileResponse);

	/// Web service operation 'CommitError' (returns error code or SOAP_OK)
	virtual	int CommitError(_ns1__CommitError *ns1__CommitError, _ns1__CommitErrorResponse *ns1__CommitErrorResponse);
};

} // namespace FSM

#endif
