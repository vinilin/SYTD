/* FtpTransService.cpp
   Generated by gSOAP 2.7.14 from Control.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "FtpTransService.h"

TransService::TransService()
{	TransService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

TransService::TransService(const struct soap &soap)
{	soap_copy_context(this, &soap);
	TransService_init(soap.imode, soap.omode);
}

TransService::TransService(soap_mode iomode)
{	TransService_init(iomode, iomode);
}

TransService::TransService(soap_mode imode, soap_mode omode)
{	TransService_init(imode, omode);
}

TransService::~TransService()
{ }

void TransService::TransService_init(soap_mode imode, soap_mode omode)
{	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ftp", "urn:ftp", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_imode(this, imode);
	soap_omode(this, omode);
	if (!this->namespaces)
		this->namespaces = namespaces;
};

TransService *TransService::copy()
{	TransService *dup = new TransService(*(struct soap*)this);
	return dup;
}

int TransService::soap_close_socket()
{	return soap_closesock(this);
}

int TransService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int TransService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int TransService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int TransService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void TransService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void TransService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *TransService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void TransService::soap_noheader()
{	header = NULL;
}

int TransService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()))
				return this->error;
			(void)serve();
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET TransService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET TransService::accept()
{	return soap_accept(this);
}

int TransService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{	soap_begin(this);
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			this->error = SOAP_EOF;
			return soap_send_fault(this);
		}
#endif

		soap_begin(this);

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_recv(this))
		{	if (this->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(this);
#else 
				return soap_send_fault(this);
#endif
			}
			soap_closesock(this);

			continue;
		}

		if (soap_envelope_begin_in(this)
		 || soap_recv_header(this)
		 || soap_body_begin_in(this)
		 || dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ftp__Transform(TransService*);
static int serve_ftp__Stop(TransService*);
static int serve_ftp__Start(TransService*);
static int serve_ftp__Pause(TransService*);
static int serve_ftp__Resume(TransService*);
static int serve_ftp__Delete(TransService*);
static int serve_ftp__DeleteAll(TransService*);
static int serve_ftp__GetState(TransService*);

int TransService::dispatch()
{	if (soap_peek_element(this))
		return this->error;
	if (!soap_match_tag(this, this->tag, "ftp:Transform"))
		return serve_ftp__Transform(this);
	if (!soap_match_tag(this, this->tag, "ftp:Stop"))
		return serve_ftp__Stop(this);
	if (!soap_match_tag(this, this->tag, "ftp:Start"))
		return serve_ftp__Start(this);
	if (!soap_match_tag(this, this->tag, "ftp:Pause"))
		return serve_ftp__Pause(this);
	if (!soap_match_tag(this, this->tag, "ftp:Resume"))
		return serve_ftp__Resume(this);
	if (!soap_match_tag(this, this->tag, "ftp:Delete"))
		return serve_ftp__Delete(this);
	if (!soap_match_tag(this, this->tag, "ftp:DeleteAll"))
		return serve_ftp__DeleteAll(this);
	if (!soap_match_tag(this, this->tag, "ftp:GetState"))
		return serve_ftp__GetState(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ftp__Transform(TransService *soap)
{	struct ftp__Transform soap_tmp_ftp__Transform;
	struct ftp__TransformResponse soap_tmp_ftp__TransformResponse;
	soap_default_ftp__TransformResponse(soap, &soap_tmp_ftp__TransformResponse);
	soap_default_ftp__Transform(soap, &soap_tmp_ftp__Transform);
	soap->encodingStyle = "";
	if (!soap_get_ftp__Transform(soap, &soap_tmp_ftp__Transform, "ftp:Transform", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Transform(soap_tmp_ftp__Transform.flist, soap_tmp_ftp__Transform.position, soap_tmp_ftp__TransformResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ftp__TransformResponse(soap, &soap_tmp_ftp__TransformResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ftp__TransformResponse(soap, &soap_tmp_ftp__TransformResponse, "ftp:TransformResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ftp__TransformResponse(soap, &soap_tmp_ftp__TransformResponse, "ftp:TransformResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ftp__Stop(TransService *soap)
{	struct ftp__Stop soap_tmp_ftp__Stop;
	struct ftp__StopResponse soap_tmp_ftp__StopResponse;
	soap_default_ftp__StopResponse(soap, &soap_tmp_ftp__StopResponse);
	soap_default_ftp__Stop(soap, &soap_tmp_ftp__Stop);
	soap->encodingStyle = "";
	if (!soap_get_ftp__Stop(soap, &soap_tmp_ftp__Stop, "ftp:Stop", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Stop(soap_tmp_ftp__StopResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ftp__StopResponse(soap, &soap_tmp_ftp__StopResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ftp__StopResponse(soap, &soap_tmp_ftp__StopResponse, "ftp:StopResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ftp__StopResponse(soap, &soap_tmp_ftp__StopResponse, "ftp:StopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ftp__Start(TransService *soap)
{	struct ftp__Start soap_tmp_ftp__Start;
	struct ftp__StartResponse soap_tmp_ftp__StartResponse;
	soap_default_ftp__StartResponse(soap, &soap_tmp_ftp__StartResponse);
	soap_default_ftp__Start(soap, &soap_tmp_ftp__Start);
	soap->encodingStyle = "";
	if (!soap_get_ftp__Start(soap, &soap_tmp_ftp__Start, "ftp:Start", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Start(soap_tmp_ftp__StartResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ftp__StartResponse(soap, &soap_tmp_ftp__StartResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ftp__StartResponse(soap, &soap_tmp_ftp__StartResponse, "ftp:StartResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ftp__StartResponse(soap, &soap_tmp_ftp__StartResponse, "ftp:StartResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ftp__Pause(TransService *soap)
{	struct ftp__Pause soap_tmp_ftp__Pause;
	struct ftp__PauseResponse soap_tmp_ftp__PauseResponse;
	soap_default_ftp__PauseResponse(soap, &soap_tmp_ftp__PauseResponse);
	soap_default_ftp__Pause(soap, &soap_tmp_ftp__Pause);
	soap->encodingStyle = "";
	if (!soap_get_ftp__Pause(soap, &soap_tmp_ftp__Pause, "ftp:Pause", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Pause(soap_tmp_ftp__PauseResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ftp__PauseResponse(soap, &soap_tmp_ftp__PauseResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ftp__PauseResponse(soap, &soap_tmp_ftp__PauseResponse, "ftp:PauseResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ftp__PauseResponse(soap, &soap_tmp_ftp__PauseResponse, "ftp:PauseResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ftp__Resume(TransService *soap)
{	struct ftp__Resume soap_tmp_ftp__Resume;
	struct ftp__ResumeResponse soap_tmp_ftp__ResumeResponse;
	soap_default_ftp__ResumeResponse(soap, &soap_tmp_ftp__ResumeResponse);
	soap_default_ftp__Resume(soap, &soap_tmp_ftp__Resume);
	soap->encodingStyle = "";
	if (!soap_get_ftp__Resume(soap, &soap_tmp_ftp__Resume, "ftp:Resume", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Resume(soap_tmp_ftp__ResumeResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ftp__ResumeResponse(soap, &soap_tmp_ftp__ResumeResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ftp__ResumeResponse(soap, &soap_tmp_ftp__ResumeResponse, "ftp:ResumeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ftp__ResumeResponse(soap, &soap_tmp_ftp__ResumeResponse, "ftp:ResumeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ftp__Delete(TransService *soap)
{	struct ftp__Delete soap_tmp_ftp__Delete;
	struct ftp__DeleteResponse soap_tmp_ftp__DeleteResponse;
	soap_default_ftp__DeleteResponse(soap, &soap_tmp_ftp__DeleteResponse);
	soap_default_ftp__Delete(soap, &soap_tmp_ftp__Delete);
	soap->encodingStyle = "";
	if (!soap_get_ftp__Delete(soap, &soap_tmp_ftp__Delete, "ftp:Delete", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Delete(soap_tmp_ftp__Delete.id, soap_tmp_ftp__DeleteResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ftp__DeleteResponse(soap, &soap_tmp_ftp__DeleteResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ftp__DeleteResponse(soap, &soap_tmp_ftp__DeleteResponse, "ftp:DeleteResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ftp__DeleteResponse(soap, &soap_tmp_ftp__DeleteResponse, "ftp:DeleteResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ftp__DeleteAll(TransService *soap)
{	struct ftp__DeleteAll soap_tmp_ftp__DeleteAll;
	struct ftp__DeleteAllResponse soap_tmp_ftp__DeleteAllResponse;
	soap_default_ftp__DeleteAllResponse(soap, &soap_tmp_ftp__DeleteAllResponse);
	soap_default_ftp__DeleteAll(soap, &soap_tmp_ftp__DeleteAll);
	soap->encodingStyle = "";
	if (!soap_get_ftp__DeleteAll(soap, &soap_tmp_ftp__DeleteAll, "ftp:DeleteAll", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->DeleteAll(soap_tmp_ftp__DeleteAllResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ftp__DeleteAllResponse(soap, &soap_tmp_ftp__DeleteAllResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ftp__DeleteAllResponse(soap, &soap_tmp_ftp__DeleteAllResponse, "ftp:DeleteAllResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ftp__DeleteAllResponse(soap, &soap_tmp_ftp__DeleteAllResponse, "ftp:DeleteAllResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ftp__GetState(TransService *soap)
{	struct ftp__GetState soap_tmp_ftp__GetState;
	ftp__State response;
	response.soap_default(soap);
	soap_default_ftp__GetState(soap, &soap_tmp_ftp__GetState);
	soap->encodingStyle = "";
	if (!soap_get_ftp__GetState(soap, &soap_tmp_ftp__GetState, "ftp:GetState", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetState(&response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	response.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || response.soap_put(soap, "ftp:State", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || response.soap_put(soap, "ftp:State", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
