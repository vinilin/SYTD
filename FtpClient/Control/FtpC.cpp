/* FtpC.cpp
   Generated by gSOAP 2.7.14 from Control.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "FtpH.h"

SOAP_SOURCE_STAMP("@(#) FtpC.cpp ver 2.7.14 2009-12-05 12:51:23 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__positiveInteger:
		return soap_in_xsd__positiveInteger(soap, NULL, NULL, "xsd:positiveInteger");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_ftp__Status:
		return soap_in_ftp__Status(soap, NULL, NULL, "ftp:Status");
	case SOAP_TYPE_ftp__State:
		return soap_in_ftp__State(soap, NULL, NULL, "ftp:State");
	case SOAP_TYPE_ftp__ArrayOfFile:
		return soap_in_ftp__ArrayOfFile(soap, NULL, NULL, "ftp:ArrayOfFile");
	case SOAP_TYPE_ftp__Position:
		return soap_in_ftp__Position(soap, NULL, NULL, "ftp:Position");
	case SOAP_TYPE_ftp__File:
		return soap_in_ftp__File(soap, NULL, NULL, "ftp:File");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ftp__GetState:
		return soap_in_ftp__GetState(soap, NULL, NULL, "ftp:GetState");
	case SOAP_TYPE_ftp__DeleteAll:
		return soap_in_ftp__DeleteAll(soap, NULL, NULL, "ftp:DeleteAll");
	case SOAP_TYPE_ftp__DeleteAllResponse:
		return soap_in_ftp__DeleteAllResponse(soap, NULL, NULL, "ftp:DeleteAllResponse");
	case SOAP_TYPE_ftp__Delete:
		return soap_in_ftp__Delete(soap, NULL, NULL, "ftp:Delete");
	case SOAP_TYPE_ftp__DeleteResponse:
		return soap_in_ftp__DeleteResponse(soap, NULL, NULL, "ftp:DeleteResponse");
	case SOAP_TYPE_ftp__Resume:
		return soap_in_ftp__Resume(soap, NULL, NULL, "ftp:Resume");
	case SOAP_TYPE_ftp__ResumeResponse:
		return soap_in_ftp__ResumeResponse(soap, NULL, NULL, "ftp:ResumeResponse");
	case SOAP_TYPE_ftp__Pause:
		return soap_in_ftp__Pause(soap, NULL, NULL, "ftp:Pause");
	case SOAP_TYPE_ftp__PauseResponse:
		return soap_in_ftp__PauseResponse(soap, NULL, NULL, "ftp:PauseResponse");
	case SOAP_TYPE_ftp__Start:
		return soap_in_ftp__Start(soap, NULL, NULL, "ftp:Start");
	case SOAP_TYPE_ftp__StartResponse:
		return soap_in_ftp__StartResponse(soap, NULL, NULL, "ftp:StartResponse");
	case SOAP_TYPE_ftp__Stop:
		return soap_in_ftp__Stop(soap, NULL, NULL, "ftp:Stop");
	case SOAP_TYPE_ftp__StopResponse:
		return soap_in_ftp__StopResponse(soap, NULL, NULL, "ftp:StopResponse");
	case SOAP_TYPE_ftp__Transform:
		return soap_in_ftp__Transform(soap, NULL, NULL, "ftp:Transform");
	case SOAP_TYPE_ftp__TransformResponse:
		return soap_in_ftp__TransformResponse(soap, NULL, NULL, "ftp:TransformResponse");
	case SOAP_TYPE_PointerToftp__State:
		return soap_in_PointerToftp__State(soap, NULL, NULL, "ftp:State");
	case SOAP_TYPE_PointerToftp__Position:
		return soap_in_PointerToftp__Position(soap, NULL, NULL, "ftp:Position");
	case SOAP_TYPE_PointerToftp__ArrayOfFile:
		return soap_in_PointerToftp__ArrayOfFile(soap, NULL, NULL, "ftp:ArrayOfFile");
	case SOAP_TYPE_PointerToftp__File:
		return soap_in_PointerToftp__File(soap, NULL, NULL, "ftp:File");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ftp:State"))
		{	*type = SOAP_TYPE_ftp__State;
			return soap_in_ftp__State(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:ArrayOfFile"))
		{	*type = SOAP_TYPE_ftp__ArrayOfFile;
			return soap_in_ftp__ArrayOfFile(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:Position"))
		{	*type = SOAP_TYPE_ftp__Position;
			return soap_in_ftp__Position(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:File"))
		{	*type = SOAP_TYPE_ftp__File;
			return soap_in_ftp__File(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:positiveInteger"))
		{	*type = SOAP_TYPE_xsd__positiveInteger;
			return soap_in_xsd__positiveInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:Status"))
		{	*type = SOAP_TYPE_ftp__Status;
			return soap_in_ftp__Status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:GetState"))
		{	*type = SOAP_TYPE_ftp__GetState;
			return soap_in_ftp__GetState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:DeleteAll"))
		{	*type = SOAP_TYPE_ftp__DeleteAll;
			return soap_in_ftp__DeleteAll(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:DeleteAllResponse"))
		{	*type = SOAP_TYPE_ftp__DeleteAllResponse;
			return soap_in_ftp__DeleteAllResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:Delete"))
		{	*type = SOAP_TYPE_ftp__Delete;
			return soap_in_ftp__Delete(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:DeleteResponse"))
		{	*type = SOAP_TYPE_ftp__DeleteResponse;
			return soap_in_ftp__DeleteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:Resume"))
		{	*type = SOAP_TYPE_ftp__Resume;
			return soap_in_ftp__Resume(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:ResumeResponse"))
		{	*type = SOAP_TYPE_ftp__ResumeResponse;
			return soap_in_ftp__ResumeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:Pause"))
		{	*type = SOAP_TYPE_ftp__Pause;
			return soap_in_ftp__Pause(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:PauseResponse"))
		{	*type = SOAP_TYPE_ftp__PauseResponse;
			return soap_in_ftp__PauseResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:Start"))
		{	*type = SOAP_TYPE_ftp__Start;
			return soap_in_ftp__Start(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:StartResponse"))
		{	*type = SOAP_TYPE_ftp__StartResponse;
			return soap_in_ftp__StartResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:Stop"))
		{	*type = SOAP_TYPE_ftp__Stop;
			return soap_in_ftp__Stop(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:StopResponse"))
		{	*type = SOAP_TYPE_ftp__StopResponse;
			return soap_in_ftp__StopResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:Transform"))
		{	*type = SOAP_TYPE_ftp__Transform;
			return soap_in_ftp__Transform(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ftp:TransformResponse"))
		{	*type = SOAP_TYPE_ftp__TransformResponse;
			return soap_in_ftp__TransformResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__positiveInteger:
		return soap_out_xsd__positiveInteger(soap, tag, id, (const LONG64 *)ptr, "xsd:positiveInteger");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_ftp__Status:
		return soap_out_ftp__Status(soap, tag, id, (const enum ftp__Status *)ptr, "ftp:Status");
	case SOAP_TYPE_ftp__State:
		return ((ftp__State *)ptr)->soap_out(soap, tag, id, "ftp:State");
	case SOAP_TYPE_ftp__ArrayOfFile:
		return ((ftp__ArrayOfFile *)ptr)->soap_out(soap, tag, id, "ftp:ArrayOfFile");
	case SOAP_TYPE_ftp__Position:
		return ((ftp__Position *)ptr)->soap_out(soap, tag, id, "ftp:Position");
	case SOAP_TYPE_ftp__File:
		return ((ftp__File *)ptr)->soap_out(soap, tag, id, "ftp:File");
	case SOAP_TYPE_xsd__string:
		return soap_out_xsd__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ftp__GetState:
		return soap_out_ftp__GetState(soap, tag, id, (const struct ftp__GetState *)ptr, "ftp:GetState");
	case SOAP_TYPE_ftp__DeleteAll:
		return soap_out_ftp__DeleteAll(soap, tag, id, (const struct ftp__DeleteAll *)ptr, "ftp:DeleteAll");
	case SOAP_TYPE_ftp__DeleteAllResponse:
		return soap_out_ftp__DeleteAllResponse(soap, tag, id, (const struct ftp__DeleteAllResponse *)ptr, "ftp:DeleteAllResponse");
	case SOAP_TYPE_ftp__Delete:
		return soap_out_ftp__Delete(soap, tag, id, (const struct ftp__Delete *)ptr, "ftp:Delete");
	case SOAP_TYPE_ftp__DeleteResponse:
		return soap_out_ftp__DeleteResponse(soap, tag, id, (const struct ftp__DeleteResponse *)ptr, "ftp:DeleteResponse");
	case SOAP_TYPE_ftp__Resume:
		return soap_out_ftp__Resume(soap, tag, id, (const struct ftp__Resume *)ptr, "ftp:Resume");
	case SOAP_TYPE_ftp__ResumeResponse:
		return soap_out_ftp__ResumeResponse(soap, tag, id, (const struct ftp__ResumeResponse *)ptr, "ftp:ResumeResponse");
	case SOAP_TYPE_ftp__Pause:
		return soap_out_ftp__Pause(soap, tag, id, (const struct ftp__Pause *)ptr, "ftp:Pause");
	case SOAP_TYPE_ftp__PauseResponse:
		return soap_out_ftp__PauseResponse(soap, tag, id, (const struct ftp__PauseResponse *)ptr, "ftp:PauseResponse");
	case SOAP_TYPE_ftp__Start:
		return soap_out_ftp__Start(soap, tag, id, (const struct ftp__Start *)ptr, "ftp:Start");
	case SOAP_TYPE_ftp__StartResponse:
		return soap_out_ftp__StartResponse(soap, tag, id, (const struct ftp__StartResponse *)ptr, "ftp:StartResponse");
	case SOAP_TYPE_ftp__Stop:
		return soap_out_ftp__Stop(soap, tag, id, (const struct ftp__Stop *)ptr, "ftp:Stop");
	case SOAP_TYPE_ftp__StopResponse:
		return soap_out_ftp__StopResponse(soap, tag, id, (const struct ftp__StopResponse *)ptr, "ftp:StopResponse");
	case SOAP_TYPE_ftp__Transform:
		return soap_out_ftp__Transform(soap, tag, id, (const struct ftp__Transform *)ptr, "ftp:Transform");
	case SOAP_TYPE_ftp__TransformResponse:
		return soap_out_ftp__TransformResponse(soap, tag, id, (const struct ftp__TransformResponse *)ptr, "ftp:TransformResponse");
	case SOAP_TYPE_PointerToftp__State:
		return soap_out_PointerToftp__State(soap, tag, id, (ftp__State *const*)ptr, "ftp:State");
	case SOAP_TYPE_PointerToftp__Position:
		return soap_out_PointerToftp__Position(soap, tag, id, (ftp__Position *const*)ptr, "ftp:Position");
	case SOAP_TYPE_PointerToftp__ArrayOfFile:
		return soap_out_PointerToftp__ArrayOfFile(soap, tag, id, (ftp__ArrayOfFile *const*)ptr, "ftp:ArrayOfFile");
	case SOAP_TYPE_PointerToftp__File:
		return soap_out_PointerToftp__File(soap, tag, id, (ftp__File *const*)ptr, "ftp:File");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ftp__State:
		((ftp__State *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ftp__ArrayOfFile:
		((ftp__ArrayOfFile *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ftp__Position:
		((ftp__Position *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ftp__File:
		((ftp__File *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__string:
		soap_serialize_xsd__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ftp__GetState:
		soap_serialize_ftp__GetState(soap, (const struct ftp__GetState *)ptr);
		break;
	case SOAP_TYPE_ftp__DeleteAll:
		soap_serialize_ftp__DeleteAll(soap, (const struct ftp__DeleteAll *)ptr);
		break;
	case SOAP_TYPE_ftp__DeleteAllResponse:
		soap_serialize_ftp__DeleteAllResponse(soap, (const struct ftp__DeleteAllResponse *)ptr);
		break;
	case SOAP_TYPE_ftp__Delete:
		soap_serialize_ftp__Delete(soap, (const struct ftp__Delete *)ptr);
		break;
	case SOAP_TYPE_ftp__DeleteResponse:
		soap_serialize_ftp__DeleteResponse(soap, (const struct ftp__DeleteResponse *)ptr);
		break;
	case SOAP_TYPE_ftp__Resume:
		soap_serialize_ftp__Resume(soap, (const struct ftp__Resume *)ptr);
		break;
	case SOAP_TYPE_ftp__ResumeResponse:
		soap_serialize_ftp__ResumeResponse(soap, (const struct ftp__ResumeResponse *)ptr);
		break;
	case SOAP_TYPE_ftp__Pause:
		soap_serialize_ftp__Pause(soap, (const struct ftp__Pause *)ptr);
		break;
	case SOAP_TYPE_ftp__PauseResponse:
		soap_serialize_ftp__PauseResponse(soap, (const struct ftp__PauseResponse *)ptr);
		break;
	case SOAP_TYPE_ftp__Start:
		soap_serialize_ftp__Start(soap, (const struct ftp__Start *)ptr);
		break;
	case SOAP_TYPE_ftp__StartResponse:
		soap_serialize_ftp__StartResponse(soap, (const struct ftp__StartResponse *)ptr);
		break;
	case SOAP_TYPE_ftp__Stop:
		soap_serialize_ftp__Stop(soap, (const struct ftp__Stop *)ptr);
		break;
	case SOAP_TYPE_ftp__StopResponse:
		soap_serialize_ftp__StopResponse(soap, (const struct ftp__StopResponse *)ptr);
		break;
	case SOAP_TYPE_ftp__Transform:
		soap_serialize_ftp__Transform(soap, (const struct ftp__Transform *)ptr);
		break;
	case SOAP_TYPE_ftp__TransformResponse:
		soap_serialize_ftp__TransformResponse(soap, (const struct ftp__TransformResponse *)ptr);
		break;
	case SOAP_TYPE_PointerToftp__State:
		soap_serialize_PointerToftp__State(soap, (ftp__State *const*)ptr);
		break;
	case SOAP_TYPE_PointerToftp__Position:
		soap_serialize_PointerToftp__Position(soap, (ftp__Position *const*)ptr);
		break;
	case SOAP_TYPE_PointerToftp__ArrayOfFile:
		soap_serialize_PointerToftp__ArrayOfFile(soap, (ftp__ArrayOfFile *const*)ptr);
		break;
	case SOAP_TYPE_PointerToftp__File:
		soap_serialize_PointerToftp__File(soap, (ftp__File *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__File:
		return (void*)soap_instantiate_ftp__File(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__Position:
		return (void*)soap_instantiate_ftp__Position(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__ArrayOfFile:
		return (void*)soap_instantiate_ftp__ArrayOfFile(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__State:
		return (void*)soap_instantiate_ftp__State(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__TransformResponse:
		return (void*)soap_instantiate_ftp__TransformResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__Transform:
		return (void*)soap_instantiate_ftp__Transform(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__StopResponse:
		return (void*)soap_instantiate_ftp__StopResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__Stop:
		return (void*)soap_instantiate_ftp__Stop(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__StartResponse:
		return (void*)soap_instantiate_ftp__StartResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__Start:
		return (void*)soap_instantiate_ftp__Start(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__PauseResponse:
		return (void*)soap_instantiate_ftp__PauseResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__Pause:
		return (void*)soap_instantiate_ftp__Pause(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__ResumeResponse:
		return (void*)soap_instantiate_ftp__ResumeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__Resume:
		return (void*)soap_instantiate_ftp__Resume(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__DeleteResponse:
		return (void*)soap_instantiate_ftp__DeleteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__Delete:
		return (void*)soap_instantiate_ftp__Delete(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__DeleteAllResponse:
		return (void*)soap_instantiate_ftp__DeleteAllResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__DeleteAll:
		return (void*)soap_instantiate_ftp__DeleteAll(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ftp__GetState:
		return (void*)soap_instantiate_ftp__GetState(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerToftp__File:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerToftp__File(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ftp__File:
		if (p->size < 0)
			delete (ftp__File*)p->ptr;
		else
			delete[] (ftp__File*)p->ptr;
		break;
	case SOAP_TYPE_ftp__Position:
		if (p->size < 0)
			delete (ftp__Position*)p->ptr;
		else
			delete[] (ftp__Position*)p->ptr;
		break;
	case SOAP_TYPE_ftp__ArrayOfFile:
		if (p->size < 0)
			delete (ftp__ArrayOfFile*)p->ptr;
		else
			delete[] (ftp__ArrayOfFile*)p->ptr;
		break;
	case SOAP_TYPE_ftp__State:
		if (p->size < 0)
			delete (ftp__State*)p->ptr;
		else
			delete[] (ftp__State*)p->ptr;
		break;
	case SOAP_TYPE_ftp__TransformResponse:
		if (p->size < 0)
			delete (struct ftp__TransformResponse*)p->ptr;
		else
			delete[] (struct ftp__TransformResponse*)p->ptr;
		break;
	case SOAP_TYPE_ftp__Transform:
		if (p->size < 0)
			delete (struct ftp__Transform*)p->ptr;
		else
			delete[] (struct ftp__Transform*)p->ptr;
		break;
	case SOAP_TYPE_ftp__StopResponse:
		if (p->size < 0)
			delete (struct ftp__StopResponse*)p->ptr;
		else
			delete[] (struct ftp__StopResponse*)p->ptr;
		break;
	case SOAP_TYPE_ftp__Stop:
		if (p->size < 0)
			delete (struct ftp__Stop*)p->ptr;
		else
			delete[] (struct ftp__Stop*)p->ptr;
		break;
	case SOAP_TYPE_ftp__StartResponse:
		if (p->size < 0)
			delete (struct ftp__StartResponse*)p->ptr;
		else
			delete[] (struct ftp__StartResponse*)p->ptr;
		break;
	case SOAP_TYPE_ftp__Start:
		if (p->size < 0)
			delete (struct ftp__Start*)p->ptr;
		else
			delete[] (struct ftp__Start*)p->ptr;
		break;
	case SOAP_TYPE_ftp__PauseResponse:
		if (p->size < 0)
			delete (struct ftp__PauseResponse*)p->ptr;
		else
			delete[] (struct ftp__PauseResponse*)p->ptr;
		break;
	case SOAP_TYPE_ftp__Pause:
		if (p->size < 0)
			delete (struct ftp__Pause*)p->ptr;
		else
			delete[] (struct ftp__Pause*)p->ptr;
		break;
	case SOAP_TYPE_ftp__ResumeResponse:
		if (p->size < 0)
			delete (struct ftp__ResumeResponse*)p->ptr;
		else
			delete[] (struct ftp__ResumeResponse*)p->ptr;
		break;
	case SOAP_TYPE_ftp__Resume:
		if (p->size < 0)
			delete (struct ftp__Resume*)p->ptr;
		else
			delete[] (struct ftp__Resume*)p->ptr;
		break;
	case SOAP_TYPE_ftp__DeleteResponse:
		if (p->size < 0)
			delete (struct ftp__DeleteResponse*)p->ptr;
		else
			delete[] (struct ftp__DeleteResponse*)p->ptr;
		break;
	case SOAP_TYPE_ftp__Delete:
		if (p->size < 0)
			delete (struct ftp__Delete*)p->ptr;
		else
			delete[] (struct ftp__Delete*)p->ptr;
		break;
	case SOAP_TYPE_ftp__DeleteAllResponse:
		if (p->size < 0)
			delete (struct ftp__DeleteAllResponse*)p->ptr;
		else
			delete[] (struct ftp__DeleteAllResponse*)p->ptr;
		break;
	case SOAP_TYPE_ftp__DeleteAll:
		if (p->size < 0)
			delete (struct ftp__DeleteAll*)p->ptr;
		else
			delete[] (struct ftp__DeleteAll*)p->ptr;
		break;
	case SOAP_TYPE_ftp__GetState:
		if (p->size < 0)
			delete (struct ftp__GetState*)p->ptr;
		else
			delete[] (struct ftp__GetState*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerToftp__File:
		if (p->size < 0)
			delete (std::vector<ftp__File * >*)p->ptr;
		else
			delete[] (std::vector<ftp__File * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerToftp__File:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ftp__File * >*)p)[len] = *(ftp__File **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_long);
	if (soap_out_long(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{	long *p;
	p = soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__positiveInteger(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__positiveInteger);
	if (soap_out_xsd__positiveInteger(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_xsd__positiveInteger);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__positiveInteger(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__positiveInteger(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__positiveInteger(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_xsd__positiveInteger);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__Status(struct soap *soap, enum ftp__Status *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ftp__Status
	*a = SOAP_DEFAULT_ftp__Status;
#else
	*a = (enum ftp__Status)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__Status(struct soap *soap, const enum ftp__Status *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__Status);
	if (soap_out_ftp__Status(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_ftp__Status[] =
{	{ (long)STOP, "STOP" },
	{ (long)RUNNING, "RUNNING" },
	{ (long)PAUSE, "PAUSE" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ftp__Status2s(struct soap *soap, enum ftp__Status n)
{	const char *s = soap_code_str(soap_codes_ftp__Status, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__Status(struct soap *soap, const char *tag, int id, const enum ftp__Status *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__Status), type) || soap_send(soap, soap_ftp__Status2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum ftp__Status * SOAP_FMAC4 soap_get_ftp__Status(struct soap *soap, enum ftp__Status *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ftp__Status(struct soap *soap, const char *s, enum ftp__Status *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ftp__Status, s);
	if (map)
		*a = (enum ftp__Status)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum ftp__Status)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ftp__Status * SOAP_FMAC4 soap_in_ftp__Status(struct soap *soap, const char *tag, enum ftp__Status *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ftp__Status *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__Status, sizeof(enum ftp__Status), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ftp__Status(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ftp__Status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__Status, 0, sizeof(enum ftp__Status), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

void ftp__State::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__positiveInteger(soap, &this->ftp__State::total);
	soap_default_xsd__positiveInteger(soap, &this->ftp__State::downloaded);
	soap_default_xsd__positiveInteger(soap, &this->ftp__State::fsize);
	soap_default_xsd__positiveInteger(soap, &this->ftp__State::fdownloaded);
	soap_default_ftp__Status(soap, &this->ftp__State::status);
	soap_default_xsd__string(soap, &this->ftp__State::fname);
}

void ftp__State::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->ftp__State::fname);
}

int ftp__State::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ftp__State);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ftp__State::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ftp__State(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__State(struct soap *soap, const char *tag, int id, const ftp__State *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__State), type))
		return soap->error;
	if (soap_out_xsd__positiveInteger(soap, "total", -1, &(a->ftp__State::total), ""))
		return soap->error;
	if (soap_out_xsd__positiveInteger(soap, "downloaded", -1, &(a->ftp__State::downloaded), ""))
		return soap->error;
	if (soap_out_xsd__positiveInteger(soap, "fsize", -1, &(a->ftp__State::fsize), ""))
		return soap->error;
	if (soap_out_xsd__positiveInteger(soap, "fdownloaded", -1, &(a->ftp__State::fdownloaded), ""))
		return soap->error;
	if (soap_out_ftp__Status(soap, "status", -1, &(a->ftp__State::status), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "fname", -1, &(a->ftp__State::fname), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ftp__State::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ftp__State(soap, this, tag, type);
}

SOAP_FMAC3 ftp__State * SOAP_FMAC4 soap_get_ftp__State(struct soap *soap, ftp__State *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__State(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ftp__State::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ftp__State(soap, tag, this, type);
}

SOAP_FMAC3 ftp__State * SOAP_FMAC4 soap_in_ftp__State(struct soap *soap, const char *tag, ftp__State *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ftp__State *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__State, sizeof(ftp__State), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ftp__State)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ftp__State *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_total1 = 1;
	size_t soap_flag_downloaded1 = 1;
	size_t soap_flag_fsize1 = 1;
	size_t soap_flag_fdownloaded1 = 1;
	size_t soap_flag_status1 = 1;
	size_t soap_flag_fname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_total1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__positiveInteger(soap, "total", &(a->ftp__State::total), "xsd:positiveInteger"))
				{	soap_flag_total1--;
					continue;
				}
			if (soap_flag_downloaded1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__positiveInteger(soap, "downloaded", &(a->ftp__State::downloaded), "xsd:positiveInteger"))
				{	soap_flag_downloaded1--;
					continue;
				}
			if (soap_flag_fsize1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__positiveInteger(soap, "fsize", &(a->ftp__State::fsize), "xsd:positiveInteger"))
				{	soap_flag_fsize1--;
					continue;
				}
			if (soap_flag_fdownloaded1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__positiveInteger(soap, "fdownloaded", &(a->ftp__State::fdownloaded), "xsd:positiveInteger"))
				{	soap_flag_fdownloaded1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ftp__Status(soap, "status", &(a->ftp__State::status), "ftp:Status"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_fname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "fname", &(a->ftp__State::fname), "xsd:string"))
				{	soap_flag_fname1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ftp__State *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__State, 0, sizeof(ftp__State), 0, soap_copy_ftp__State);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_total1 > 0 || soap_flag_downloaded1 > 0 || soap_flag_fsize1 > 0 || soap_flag_fdownloaded1 > 0 || soap_flag_status1 > 0 || soap_flag_fname1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ftp__State * SOAP_FMAC4 soap_instantiate_ftp__State(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__State(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__State, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ftp__State);
		if (size)
			*size = sizeof(ftp__State);
	}
	else
	{	cp->ptr = (void*)new (ftp__State[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ftp__State);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ftp__State*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__State(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ftp__State %p -> %p\n", q, p));
	*(ftp__State*)p = *(ftp__State*)q;
}

void ftp__ArrayOfFile::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__positiveInteger(soap, &this->ftp__ArrayOfFile::id);
	soap_default_int(soap, &this->ftp__ArrayOfFile::status);
	soap_default_xsd__string(soap, &this->ftp__ArrayOfFile::path);
	soap_default_std__vectorTemplateOfPointerToftp__File(soap, &this->ftp__ArrayOfFile::__ptr);
}

void ftp__ArrayOfFile::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->ftp__ArrayOfFile::path);
	soap_serialize_std__vectorTemplateOfPointerToftp__File(soap, &this->ftp__ArrayOfFile::__ptr);
}

int ftp__ArrayOfFile::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ftp__ArrayOfFile);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ftp__ArrayOfFile::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ftp__ArrayOfFile(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__ArrayOfFile(struct soap *soap, const char *tag, int id, const ftp__ArrayOfFile *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__ArrayOfFile), type))
		return soap->error;
	if (soap_out_xsd__positiveInteger(soap, "id", -1, &(a->ftp__ArrayOfFile::id), ""))
		return soap->error;
	if (soap_out_int(soap, "status", -1, &(a->ftp__ArrayOfFile::status), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "path", -1, &(a->ftp__ArrayOfFile::path), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerToftp__File(soap, "item", -1, &(a->ftp__ArrayOfFile::__ptr), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ftp__ArrayOfFile::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ftp__ArrayOfFile(soap, this, tag, type);
}

SOAP_FMAC3 ftp__ArrayOfFile * SOAP_FMAC4 soap_get_ftp__ArrayOfFile(struct soap *soap, ftp__ArrayOfFile *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__ArrayOfFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ftp__ArrayOfFile::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ftp__ArrayOfFile(soap, tag, this, type);
}

SOAP_FMAC3 ftp__ArrayOfFile * SOAP_FMAC4 soap_in_ftp__ArrayOfFile(struct soap *soap, const char *tag, ftp__ArrayOfFile *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ftp__ArrayOfFile *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__ArrayOfFile, sizeof(ftp__ArrayOfFile), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ftp__ArrayOfFile)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ftp__ArrayOfFile *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_status1 = 1;
	size_t soap_flag_path1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__positiveInteger(soap, "id", &(a->ftp__ArrayOfFile::id), "xsd:positiveInteger"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "status", &(a->ftp__ArrayOfFile::status), "xsd:int"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_path1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "path", &(a->ftp__ArrayOfFile::path), "xsd:string"))
				{	soap_flag_path1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerToftp__File(soap, "item", &(a->ftp__ArrayOfFile::__ptr), "ftp:File"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ftp__ArrayOfFile *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__ArrayOfFile, 0, sizeof(ftp__ArrayOfFile), 0, soap_copy_ftp__ArrayOfFile);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_status1 > 0 || soap_flag_path1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ftp__ArrayOfFile * SOAP_FMAC4 soap_instantiate_ftp__ArrayOfFile(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__ArrayOfFile(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__ArrayOfFile, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ftp__ArrayOfFile);
		if (size)
			*size = sizeof(ftp__ArrayOfFile);
	}
	else
	{	cp->ptr = (void*)new (ftp__ArrayOfFile[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ftp__ArrayOfFile);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ftp__ArrayOfFile*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__ArrayOfFile(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ftp__ArrayOfFile %p -> %p\n", q, p));
	*(ftp__ArrayOfFile*)p = *(ftp__ArrayOfFile*)q;
}

void ftp__Position::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->ftp__Position::path);
	soap_default_xsd__string(soap, &this->ftp__Position::ip);
	soap_default_xsd__string(soap, &this->ftp__Position::user);
	soap_default_xsd__string(soap, &this->ftp__Position::pwd);
	soap_default_int(soap, &this->ftp__Position::port);
}

void ftp__Position::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->ftp__Position::path);
	soap_serialize_xsd__string(soap, &this->ftp__Position::ip);
	soap_serialize_xsd__string(soap, &this->ftp__Position::user);
	soap_serialize_xsd__string(soap, &this->ftp__Position::pwd);
}

int ftp__Position::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ftp__Position);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ftp__Position::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ftp__Position(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__Position(struct soap *soap, const char *tag, int id, const ftp__Position *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__Position), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "path", -1, &(a->ftp__Position::path), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "ip", -1, &(a->ftp__Position::ip), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "user", -1, &(a->ftp__Position::user), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "pwd", -1, &(a->ftp__Position::pwd), ""))
		return soap->error;
	if (soap_out_int(soap, "port", -1, &(a->ftp__Position::port), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ftp__Position::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ftp__Position(soap, this, tag, type);
}

SOAP_FMAC3 ftp__Position * SOAP_FMAC4 soap_get_ftp__Position(struct soap *soap, ftp__Position *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__Position(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ftp__Position::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ftp__Position(soap, tag, this, type);
}

SOAP_FMAC3 ftp__Position * SOAP_FMAC4 soap_in_ftp__Position(struct soap *soap, const char *tag, ftp__Position *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ftp__Position *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__Position, sizeof(ftp__Position), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ftp__Position)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ftp__Position *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_path1 = 1;
	size_t soap_flag_ip1 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_pwd1 = 1;
	size_t soap_flag_port1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_path1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "path", &(a->ftp__Position::path), "xsd:string"))
				{	soap_flag_path1--;
					continue;
				}
			if (soap_flag_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ip", &(a->ftp__Position::ip), "xsd:string"))
				{	soap_flag_ip1--;
					continue;
				}
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "user", &(a->ftp__Position::user), "xsd:string"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_pwd1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "pwd", &(a->ftp__Position::pwd), "xsd:string"))
				{	soap_flag_pwd1--;
					continue;
				}
			if (soap_flag_port1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "port", &(a->ftp__Position::port), "xsd:int"))
				{	soap_flag_port1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ftp__Position *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__Position, 0, sizeof(ftp__Position), 0, soap_copy_ftp__Position);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_path1 > 0 || soap_flag_ip1 > 0 || soap_flag_user1 > 0 || soap_flag_pwd1 > 0 || soap_flag_port1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ftp__Position * SOAP_FMAC4 soap_instantiate_ftp__Position(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__Position(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__Position, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ftp__Position);
		if (size)
			*size = sizeof(ftp__Position);
	}
	else
	{	cp->ptr = (void*)new (ftp__Position[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ftp__Position);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ftp__Position*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__Position(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ftp__Position %p -> %p\n", q, p));
	*(ftp__Position*)p = *(ftp__Position*)q;
}

void ftp__File::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__positiveInteger(soap, &this->ftp__File::id);
	soap_default_int(soap, &this->ftp__File::status);
	soap_default_xsd__string(soap, &this->ftp__File::name);
}

void ftp__File::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->ftp__File::name);
}

int ftp__File::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ftp__File);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ftp__File::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ftp__File(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__File(struct soap *soap, const char *tag, int id, const ftp__File *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__File), type))
		return soap->error;
	if (soap_out_xsd__positiveInteger(soap, "id", -1, &(a->ftp__File::id), ""))
		return soap->error;
	if (soap_out_int(soap, "status", -1, &(a->ftp__File::status), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "name", -1, &(a->ftp__File::name), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ftp__File::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ftp__File(soap, this, tag, type);
}

SOAP_FMAC3 ftp__File * SOAP_FMAC4 soap_get_ftp__File(struct soap *soap, ftp__File *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__File(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ftp__File::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ftp__File(soap, tag, this, type);
}

SOAP_FMAC3 ftp__File * SOAP_FMAC4 soap_in_ftp__File(struct soap *soap, const char *tag, ftp__File *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ftp__File *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__File, sizeof(ftp__File), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ftp__File)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ftp__File *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_status1 = 1;
	size_t soap_flag_name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__positiveInteger(soap, "id", &(a->ftp__File::id), "xsd:positiveInteger"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "status", &(a->ftp__File::status), "xsd:int"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "name", &(a->ftp__File::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ftp__File *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__File, 0, sizeof(ftp__File), 0, soap_copy_ftp__File);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_status1 > 0 || soap_flag_name1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 ftp__File * SOAP_FMAC4 soap_instantiate_ftp__File(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__File(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__File, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (ftp__File);
		if (size)
			*size = sizeof(ftp__File);
	}
	else
	{	cp->ptr = (void*)new (ftp__File[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ftp__File);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ftp__File*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__File(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ftp__File %p -> %p\n", q, p));
	*(ftp__File*)p = *(ftp__File*)q;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (soap_out_xsd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__string, 0, sizeof(std::string), 0, soap_copy_xsd__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new (std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__GetState(struct soap *soap, struct ftp__GetState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__GetState(struct soap *soap, const struct ftp__GetState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__GetState(struct soap *soap, const struct ftp__GetState *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__GetState);
	if (soap_out_ftp__GetState(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__GetState(struct soap *soap, const char *tag, int id, const struct ftp__GetState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__GetState), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__GetState * SOAP_FMAC4 soap_get_ftp__GetState(struct soap *soap, struct ftp__GetState *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__GetState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__GetState * SOAP_FMAC4 soap_in_ftp__GetState(struct soap *soap, const char *tag, struct ftp__GetState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__GetState *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__GetState, sizeof(struct ftp__GetState), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__GetState(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__GetState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__GetState, 0, sizeof(struct ftp__GetState), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__GetState * SOAP_FMAC4 soap_instantiate_ftp__GetState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__GetState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__GetState, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__GetState);
		if (size)
			*size = sizeof(struct ftp__GetState);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__GetState[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__GetState);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__GetState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__GetState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__GetState %p -> %p\n", q, p));
	*(struct ftp__GetState*)p = *(struct ftp__GetState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__DeleteAll(struct soap *soap, struct ftp__DeleteAll *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__DeleteAll(struct soap *soap, const struct ftp__DeleteAll *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__DeleteAll(struct soap *soap, const struct ftp__DeleteAll *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__DeleteAll);
	if (soap_out_ftp__DeleteAll(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__DeleteAll(struct soap *soap, const char *tag, int id, const struct ftp__DeleteAll *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__DeleteAll), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__DeleteAll * SOAP_FMAC4 soap_get_ftp__DeleteAll(struct soap *soap, struct ftp__DeleteAll *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__DeleteAll(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__DeleteAll * SOAP_FMAC4 soap_in_ftp__DeleteAll(struct soap *soap, const char *tag, struct ftp__DeleteAll *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__DeleteAll *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__DeleteAll, sizeof(struct ftp__DeleteAll), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__DeleteAll(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__DeleteAll *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__DeleteAll, 0, sizeof(struct ftp__DeleteAll), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__DeleteAll * SOAP_FMAC4 soap_instantiate_ftp__DeleteAll(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__DeleteAll(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__DeleteAll, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__DeleteAll);
		if (size)
			*size = sizeof(struct ftp__DeleteAll);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__DeleteAll[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__DeleteAll);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__DeleteAll*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__DeleteAll(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__DeleteAll %p -> %p\n", q, p));
	*(struct ftp__DeleteAll*)p = *(struct ftp__DeleteAll*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__DeleteAllResponse(struct soap *soap, struct ftp__DeleteAllResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__DeleteAllResponse(struct soap *soap, const struct ftp__DeleteAllResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__DeleteAllResponse(struct soap *soap, const struct ftp__DeleteAllResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__DeleteAllResponse);
	if (soap_out_ftp__DeleteAllResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__DeleteAllResponse(struct soap *soap, const char *tag, int id, const struct ftp__DeleteAllResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__DeleteAllResponse), type))
		return soap->error;
	if (soap_out_int(soap, "response", -1, &a->response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__DeleteAllResponse * SOAP_FMAC4 soap_get_ftp__DeleteAllResponse(struct soap *soap, struct ftp__DeleteAllResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__DeleteAllResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__DeleteAllResponse * SOAP_FMAC4 soap_in_ftp__DeleteAllResponse(struct soap *soap, const char *tag, struct ftp__DeleteAllResponse *a, const char *type)
{
	size_t soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__DeleteAllResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__DeleteAllResponse, sizeof(struct ftp__DeleteAllResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__DeleteAllResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "response", &a->response, "xsd:int"))
				{	soap_flag_response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__DeleteAllResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__DeleteAllResponse, 0, sizeof(struct ftp__DeleteAllResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__DeleteAllResponse * SOAP_FMAC4 soap_instantiate_ftp__DeleteAllResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__DeleteAllResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__DeleteAllResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__DeleteAllResponse);
		if (size)
			*size = sizeof(struct ftp__DeleteAllResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__DeleteAllResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__DeleteAllResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__DeleteAllResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__DeleteAllResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__DeleteAllResponse %p -> %p\n", q, p));
	*(struct ftp__DeleteAllResponse*)p = *(struct ftp__DeleteAllResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__Delete(struct soap *soap, struct ftp__Delete *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__positiveInteger(soap, &a->id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__Delete(struct soap *soap, const struct ftp__Delete *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__Delete(struct soap *soap, const struct ftp__Delete *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__Delete);
	if (soap_out_ftp__Delete(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__Delete(struct soap *soap, const char *tag, int id, const struct ftp__Delete *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__Delete), type))
		return soap->error;
	if (soap_out_xsd__positiveInteger(soap, "id", -1, &a->id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__Delete * SOAP_FMAC4 soap_get_ftp__Delete(struct soap *soap, struct ftp__Delete *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__Delete(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__Delete * SOAP_FMAC4 soap_in_ftp__Delete(struct soap *soap, const char *tag, struct ftp__Delete *a, const char *type)
{
	size_t soap_flag_id = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__Delete *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__Delete, sizeof(struct ftp__Delete), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__Delete(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__positiveInteger(soap, "id", &a->id, "xsd:positiveInteger"))
				{	soap_flag_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__Delete *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__Delete, 0, sizeof(struct ftp__Delete), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__Delete * SOAP_FMAC4 soap_instantiate_ftp__Delete(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__Delete(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__Delete, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__Delete);
		if (size)
			*size = sizeof(struct ftp__Delete);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__Delete[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__Delete);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__Delete*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__Delete(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__Delete %p -> %p\n", q, p));
	*(struct ftp__Delete*)p = *(struct ftp__Delete*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__DeleteResponse(struct soap *soap, struct ftp__DeleteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__DeleteResponse(struct soap *soap, const struct ftp__DeleteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__DeleteResponse(struct soap *soap, const struct ftp__DeleteResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__DeleteResponse);
	if (soap_out_ftp__DeleteResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__DeleteResponse(struct soap *soap, const char *tag, int id, const struct ftp__DeleteResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__DeleteResponse), type))
		return soap->error;
	if (soap_out_int(soap, "response", -1, &a->response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__DeleteResponse * SOAP_FMAC4 soap_get_ftp__DeleteResponse(struct soap *soap, struct ftp__DeleteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__DeleteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__DeleteResponse * SOAP_FMAC4 soap_in_ftp__DeleteResponse(struct soap *soap, const char *tag, struct ftp__DeleteResponse *a, const char *type)
{
	size_t soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__DeleteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__DeleteResponse, sizeof(struct ftp__DeleteResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__DeleteResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "response", &a->response, "xsd:int"))
				{	soap_flag_response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__DeleteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__DeleteResponse, 0, sizeof(struct ftp__DeleteResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__DeleteResponse * SOAP_FMAC4 soap_instantiate_ftp__DeleteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__DeleteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__DeleteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__DeleteResponse);
		if (size)
			*size = sizeof(struct ftp__DeleteResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__DeleteResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__DeleteResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__DeleteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__DeleteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__DeleteResponse %p -> %p\n", q, p));
	*(struct ftp__DeleteResponse*)p = *(struct ftp__DeleteResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__Resume(struct soap *soap, struct ftp__Resume *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__Resume(struct soap *soap, const struct ftp__Resume *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__Resume(struct soap *soap, const struct ftp__Resume *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__Resume);
	if (soap_out_ftp__Resume(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__Resume(struct soap *soap, const char *tag, int id, const struct ftp__Resume *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__Resume), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__Resume * SOAP_FMAC4 soap_get_ftp__Resume(struct soap *soap, struct ftp__Resume *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__Resume(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__Resume * SOAP_FMAC4 soap_in_ftp__Resume(struct soap *soap, const char *tag, struct ftp__Resume *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__Resume *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__Resume, sizeof(struct ftp__Resume), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__Resume(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__Resume *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__Resume, 0, sizeof(struct ftp__Resume), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__Resume * SOAP_FMAC4 soap_instantiate_ftp__Resume(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__Resume(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__Resume, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__Resume);
		if (size)
			*size = sizeof(struct ftp__Resume);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__Resume[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__Resume);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__Resume*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__Resume(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__Resume %p -> %p\n", q, p));
	*(struct ftp__Resume*)p = *(struct ftp__Resume*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__ResumeResponse(struct soap *soap, struct ftp__ResumeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__ResumeResponse(struct soap *soap, const struct ftp__ResumeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__ResumeResponse(struct soap *soap, const struct ftp__ResumeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__ResumeResponse);
	if (soap_out_ftp__ResumeResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__ResumeResponse(struct soap *soap, const char *tag, int id, const struct ftp__ResumeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__ResumeResponse), type))
		return soap->error;
	if (soap_out_int(soap, "response", -1, &a->response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__ResumeResponse * SOAP_FMAC4 soap_get_ftp__ResumeResponse(struct soap *soap, struct ftp__ResumeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__ResumeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__ResumeResponse * SOAP_FMAC4 soap_in_ftp__ResumeResponse(struct soap *soap, const char *tag, struct ftp__ResumeResponse *a, const char *type)
{
	size_t soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__ResumeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__ResumeResponse, sizeof(struct ftp__ResumeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__ResumeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "response", &a->response, "xsd:int"))
				{	soap_flag_response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__ResumeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__ResumeResponse, 0, sizeof(struct ftp__ResumeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__ResumeResponse * SOAP_FMAC4 soap_instantiate_ftp__ResumeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__ResumeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__ResumeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__ResumeResponse);
		if (size)
			*size = sizeof(struct ftp__ResumeResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__ResumeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__ResumeResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__ResumeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__ResumeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__ResumeResponse %p -> %p\n", q, p));
	*(struct ftp__ResumeResponse*)p = *(struct ftp__ResumeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__Pause(struct soap *soap, struct ftp__Pause *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__Pause(struct soap *soap, const struct ftp__Pause *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__Pause(struct soap *soap, const struct ftp__Pause *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__Pause);
	if (soap_out_ftp__Pause(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__Pause(struct soap *soap, const char *tag, int id, const struct ftp__Pause *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__Pause), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__Pause * SOAP_FMAC4 soap_get_ftp__Pause(struct soap *soap, struct ftp__Pause *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__Pause(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__Pause * SOAP_FMAC4 soap_in_ftp__Pause(struct soap *soap, const char *tag, struct ftp__Pause *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__Pause *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__Pause, sizeof(struct ftp__Pause), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__Pause(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__Pause *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__Pause, 0, sizeof(struct ftp__Pause), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__Pause * SOAP_FMAC4 soap_instantiate_ftp__Pause(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__Pause(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__Pause, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__Pause);
		if (size)
			*size = sizeof(struct ftp__Pause);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__Pause[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__Pause);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__Pause*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__Pause(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__Pause %p -> %p\n", q, p));
	*(struct ftp__Pause*)p = *(struct ftp__Pause*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__PauseResponse(struct soap *soap, struct ftp__PauseResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__PauseResponse(struct soap *soap, const struct ftp__PauseResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__PauseResponse(struct soap *soap, const struct ftp__PauseResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__PauseResponse);
	if (soap_out_ftp__PauseResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__PauseResponse(struct soap *soap, const char *tag, int id, const struct ftp__PauseResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__PauseResponse), type))
		return soap->error;
	if (soap_out_int(soap, "response", -1, &a->response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__PauseResponse * SOAP_FMAC4 soap_get_ftp__PauseResponse(struct soap *soap, struct ftp__PauseResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__PauseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__PauseResponse * SOAP_FMAC4 soap_in_ftp__PauseResponse(struct soap *soap, const char *tag, struct ftp__PauseResponse *a, const char *type)
{
	size_t soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__PauseResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__PauseResponse, sizeof(struct ftp__PauseResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__PauseResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "response", &a->response, "xsd:int"))
				{	soap_flag_response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__PauseResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__PauseResponse, 0, sizeof(struct ftp__PauseResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__PauseResponse * SOAP_FMAC4 soap_instantiate_ftp__PauseResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__PauseResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__PauseResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__PauseResponse);
		if (size)
			*size = sizeof(struct ftp__PauseResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__PauseResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__PauseResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__PauseResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__PauseResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__PauseResponse %p -> %p\n", q, p));
	*(struct ftp__PauseResponse*)p = *(struct ftp__PauseResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__Start(struct soap *soap, struct ftp__Start *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__Start(struct soap *soap, const struct ftp__Start *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__Start(struct soap *soap, const struct ftp__Start *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__Start);
	if (soap_out_ftp__Start(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__Start(struct soap *soap, const char *tag, int id, const struct ftp__Start *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__Start), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__Start * SOAP_FMAC4 soap_get_ftp__Start(struct soap *soap, struct ftp__Start *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__Start(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__Start * SOAP_FMAC4 soap_in_ftp__Start(struct soap *soap, const char *tag, struct ftp__Start *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__Start *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__Start, sizeof(struct ftp__Start), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__Start(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__Start *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__Start, 0, sizeof(struct ftp__Start), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__Start * SOAP_FMAC4 soap_instantiate_ftp__Start(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__Start(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__Start, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__Start);
		if (size)
			*size = sizeof(struct ftp__Start);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__Start[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__Start);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__Start*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__Start(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__Start %p -> %p\n", q, p));
	*(struct ftp__Start*)p = *(struct ftp__Start*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__StartResponse(struct soap *soap, struct ftp__StartResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__StartResponse(struct soap *soap, const struct ftp__StartResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__StartResponse(struct soap *soap, const struct ftp__StartResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__StartResponse);
	if (soap_out_ftp__StartResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__StartResponse(struct soap *soap, const char *tag, int id, const struct ftp__StartResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__StartResponse), type))
		return soap->error;
	if (soap_out_int(soap, "response", -1, &a->response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__StartResponse * SOAP_FMAC4 soap_get_ftp__StartResponse(struct soap *soap, struct ftp__StartResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__StartResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__StartResponse * SOAP_FMAC4 soap_in_ftp__StartResponse(struct soap *soap, const char *tag, struct ftp__StartResponse *a, const char *type)
{
	size_t soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__StartResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__StartResponse, sizeof(struct ftp__StartResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__StartResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "response", &a->response, "xsd:int"))
				{	soap_flag_response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__StartResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__StartResponse, 0, sizeof(struct ftp__StartResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__StartResponse * SOAP_FMAC4 soap_instantiate_ftp__StartResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__StartResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__StartResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__StartResponse);
		if (size)
			*size = sizeof(struct ftp__StartResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__StartResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__StartResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__StartResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__StartResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__StartResponse %p -> %p\n", q, p));
	*(struct ftp__StartResponse*)p = *(struct ftp__StartResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__Stop(struct soap *soap, struct ftp__Stop *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__Stop(struct soap *soap, const struct ftp__Stop *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__Stop(struct soap *soap, const struct ftp__Stop *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__Stop);
	if (soap_out_ftp__Stop(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__Stop(struct soap *soap, const char *tag, int id, const struct ftp__Stop *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__Stop), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__Stop * SOAP_FMAC4 soap_get_ftp__Stop(struct soap *soap, struct ftp__Stop *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__Stop(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__Stop * SOAP_FMAC4 soap_in_ftp__Stop(struct soap *soap, const char *tag, struct ftp__Stop *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__Stop *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__Stop, sizeof(struct ftp__Stop), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__Stop(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__Stop *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__Stop, 0, sizeof(struct ftp__Stop), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__Stop * SOAP_FMAC4 soap_instantiate_ftp__Stop(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__Stop(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__Stop, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__Stop);
		if (size)
			*size = sizeof(struct ftp__Stop);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__Stop[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__Stop);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__Stop*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__Stop(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__Stop %p -> %p\n", q, p));
	*(struct ftp__Stop*)p = *(struct ftp__Stop*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__StopResponse(struct soap *soap, struct ftp__StopResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__StopResponse(struct soap *soap, const struct ftp__StopResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__StopResponse(struct soap *soap, const struct ftp__StopResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__StopResponse);
	if (soap_out_ftp__StopResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__StopResponse(struct soap *soap, const char *tag, int id, const struct ftp__StopResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__StopResponse), type))
		return soap->error;
	if (soap_out_int(soap, "response", -1, &a->response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__StopResponse * SOAP_FMAC4 soap_get_ftp__StopResponse(struct soap *soap, struct ftp__StopResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__StopResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__StopResponse * SOAP_FMAC4 soap_in_ftp__StopResponse(struct soap *soap, const char *tag, struct ftp__StopResponse *a, const char *type)
{
	size_t soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__StopResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__StopResponse, sizeof(struct ftp__StopResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__StopResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "response", &a->response, "xsd:int"))
				{	soap_flag_response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__StopResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__StopResponse, 0, sizeof(struct ftp__StopResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__StopResponse * SOAP_FMAC4 soap_instantiate_ftp__StopResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__StopResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__StopResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__StopResponse);
		if (size)
			*size = sizeof(struct ftp__StopResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__StopResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__StopResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__StopResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__StopResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__StopResponse %p -> %p\n", q, p));
	*(struct ftp__StopResponse*)p = *(struct ftp__StopResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__Transform(struct soap *soap, struct ftp__Transform *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->flist = NULL;
	a->position = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__Transform(struct soap *soap, const struct ftp__Transform *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToftp__ArrayOfFile(soap, &a->flist);
	soap_serialize_PointerToftp__Position(soap, &a->position);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__Transform(struct soap *soap, const struct ftp__Transform *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__Transform);
	if (soap_out_ftp__Transform(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__Transform(struct soap *soap, const char *tag, int id, const struct ftp__Transform *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__Transform), type))
		return soap->error;
	if (soap_out_PointerToftp__ArrayOfFile(soap, "flist", -1, &a->flist, ""))
		return soap->error;
	if (soap_out_PointerToftp__Position(soap, "position", -1, &a->position, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__Transform * SOAP_FMAC4 soap_get_ftp__Transform(struct soap *soap, struct ftp__Transform *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__Transform(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__Transform * SOAP_FMAC4 soap_in_ftp__Transform(struct soap *soap, const char *tag, struct ftp__Transform *a, const char *type)
{
	size_t soap_flag_flist = 1;
	size_t soap_flag_position = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__Transform *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__Transform, sizeof(struct ftp__Transform), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__Transform(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_flist && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToftp__ArrayOfFile(soap, "flist", &a->flist, "ftp:ArrayOfFile"))
				{	soap_flag_flist--;
					continue;
				}
			if (soap_flag_position && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToftp__Position(soap, "position", &a->position, "ftp:Position"))
				{	soap_flag_position--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__Transform *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__Transform, 0, sizeof(struct ftp__Transform), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__Transform * SOAP_FMAC4 soap_instantiate_ftp__Transform(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__Transform(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__Transform, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__Transform);
		if (size)
			*size = sizeof(struct ftp__Transform);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__Transform[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__Transform);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__Transform*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__Transform(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__Transform %p -> %p\n", q, p));
	*(struct ftp__Transform*)p = *(struct ftp__Transform*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ftp__TransformResponse(struct soap *soap, struct ftp__TransformResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ftp__TransformResponse(struct soap *soap, const struct ftp__TransformResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ftp__TransformResponse(struct soap *soap, const struct ftp__TransformResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ftp__TransformResponse);
	if (soap_out_ftp__TransformResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ftp__TransformResponse(struct soap *soap, const char *tag, int id, const struct ftp__TransformResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ftp__TransformResponse), type))
		return soap->error;
	if (soap_out_int(soap, "response", -1, &a->response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ftp__TransformResponse * SOAP_FMAC4 soap_get_ftp__TransformResponse(struct soap *soap, struct ftp__TransformResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ftp__TransformResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct ftp__TransformResponse * SOAP_FMAC4 soap_in_ftp__TransformResponse(struct soap *soap, const char *tag, struct ftp__TransformResponse *a, const char *type)
{
	size_t soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ftp__TransformResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ftp__TransformResponse, sizeof(struct ftp__TransformResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ftp__TransformResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "response", &a->response, "xsd:int"))
				{	soap_flag_response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ftp__TransformResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ftp__TransformResponse, 0, sizeof(struct ftp__TransformResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 struct ftp__TransformResponse * SOAP_FMAC4 soap_instantiate_ftp__TransformResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ftp__TransformResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ftp__TransformResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ftp__TransformResponse);
		if (size)
			*size = sizeof(struct ftp__TransformResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ftp__TransformResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ftp__TransformResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ftp__TransformResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ftp__TransformResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ftp__TransformResponse %p -> %p\n", q, p));
	*(struct ftp__TransformResponse*)p = *(struct ftp__TransformResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToftp__State(struct soap *soap, ftp__State *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ftp__State))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToftp__State(struct soap *soap, ftp__State *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToftp__State);
	if (soap_out_PointerToftp__State(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToftp__State(struct soap *soap, const char *tag, int id, ftp__State *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ftp__State);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ftp__State ** SOAP_FMAC4 soap_get_PointerToftp__State(struct soap *soap, ftp__State **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToftp__State(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ftp__State ** SOAP_FMAC4 soap_in_PointerToftp__State(struct soap *soap, const char *tag, ftp__State **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ftp__State **)soap_malloc(soap, sizeof(ftp__State *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ftp__State *)soap_instantiate_ftp__State(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ftp__State ** p = (ftp__State **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ftp__State, sizeof(ftp__State), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToftp__Position(struct soap *soap, ftp__Position *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ftp__Position))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToftp__Position(struct soap *soap, ftp__Position *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToftp__Position);
	if (soap_out_PointerToftp__Position(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToftp__Position(struct soap *soap, const char *tag, int id, ftp__Position *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ftp__Position);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ftp__Position ** SOAP_FMAC4 soap_get_PointerToftp__Position(struct soap *soap, ftp__Position **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToftp__Position(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ftp__Position ** SOAP_FMAC4 soap_in_PointerToftp__Position(struct soap *soap, const char *tag, ftp__Position **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ftp__Position **)soap_malloc(soap, sizeof(ftp__Position *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ftp__Position *)soap_instantiate_ftp__Position(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ftp__Position ** p = (ftp__Position **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ftp__Position, sizeof(ftp__Position), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToftp__ArrayOfFile(struct soap *soap, ftp__ArrayOfFile *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ftp__ArrayOfFile))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToftp__ArrayOfFile(struct soap *soap, ftp__ArrayOfFile *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToftp__ArrayOfFile);
	if (soap_out_PointerToftp__ArrayOfFile(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToftp__ArrayOfFile(struct soap *soap, const char *tag, int id, ftp__ArrayOfFile *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ftp__ArrayOfFile);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ftp__ArrayOfFile ** SOAP_FMAC4 soap_get_PointerToftp__ArrayOfFile(struct soap *soap, ftp__ArrayOfFile **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToftp__ArrayOfFile(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ftp__ArrayOfFile ** SOAP_FMAC4 soap_in_PointerToftp__ArrayOfFile(struct soap *soap, const char *tag, ftp__ArrayOfFile **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ftp__ArrayOfFile **)soap_malloc(soap, sizeof(ftp__ArrayOfFile *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ftp__ArrayOfFile *)soap_instantiate_ftp__ArrayOfFile(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ftp__ArrayOfFile ** p = (ftp__ArrayOfFile **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ftp__ArrayOfFile, sizeof(ftp__ArrayOfFile), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToftp__File(struct soap *soap, ftp__File *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ftp__File))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToftp__File(struct soap *soap, ftp__File *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToftp__File);
	if (soap_out_PointerToftp__File(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToftp__File(struct soap *soap, const char *tag, int id, ftp__File *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ftp__File);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ftp__File ** SOAP_FMAC4 soap_get_PointerToftp__File(struct soap *soap, ftp__File **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToftp__File(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ftp__File ** SOAP_FMAC4 soap_in_PointerToftp__File(struct soap *soap, const char *tag, ftp__File **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ftp__File **)soap_malloc(soap, sizeof(ftp__File *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ftp__File *)soap_instantiate_ftp__File(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ftp__File ** p = (ftp__File **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ftp__File, sizeof(ftp__File), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToftp__File(struct soap *soap, std::vector<ftp__File * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToftp__File(struct soap *soap, const std::vector<ftp__File * >*a)
{
	for (std::vector<ftp__File * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerToftp__File(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToftp__File(struct soap *soap, const char *tag, int id, const std::vector<ftp__File * >*a, const char *type)
{
	for (std::vector<ftp__File * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerToftp__File(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ftp__File * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToftp__File(struct soap *soap, const char *tag, std::vector<ftp__File * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerToftp__File(soap, -1)))
		return NULL;
	ftp__File *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ftp__File, SOAP_TYPE_std__vectorTemplateOfPointerToftp__File, sizeof(ftp__File), 1))
				break;
			if (!soap_in_PointerToftp__File(soap, tag, NULL, "ftp:File"))
				break;
		}
		else
		{
			if (!soap_in_PointerToftp__File(soap, tag, &n, "ftp:File"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC3 std::vector<ftp__File * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerToftp__File(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerToftp__File(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerToftp__File, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::vector<ftp__File * >);
		if (size)
			*size = sizeof(std::vector<ftp__File * >);
	}
	else
	{	cp->ptr = (void*)new (std::vector<ftp__File * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ftp__File * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ftp__File * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToftp__File(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ftp__File * > %p -> %p\n", q, p));
	*(std::vector<ftp__File * >*)p = *(std::vector<ftp__File * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of FtpC.cpp */
