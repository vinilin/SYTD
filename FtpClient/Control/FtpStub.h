/* FtpStub.h
   Generated by gSOAP 2.7.14 from Control.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef FtpStub_H
#define FtpStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ftp__Status
#define SOAP_TYPE_ftp__Status (18)
/* ftp:Status */
enum ftp__Status {STOP = 1, RUNNING = 2, PAUSE = 3};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ftp__File
#define SOAP_TYPE_ftp__File (13)
/* ftp:File */
class SOAP_CMAC ftp__File
{
public:
	LONG64 id;	/* required element of type xsd:positiveInteger */
	int status;	/* required element of type xsd:int */
	std::string name;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ftp__File */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ftp__File() : id(0), status(0) { this->soap_default(NULL); }
	virtual ~ftp__File() { }
};
#endif

#ifndef SOAP_TYPE_ftp__Position
#define SOAP_TYPE_ftp__Position (14)
/* ftp:Position */
class SOAP_CMAC ftp__Position
{
public:
	std::string path;	/* required element of type xsd:string */
	std::string ip;	/* required element of type xsd:string */
	std::string user;	/* required element of type xsd:string */
	std::string pwd;	/* required element of type xsd:string */
	int port;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ftp__Position */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ftp__Position() : port(0) { this->soap_default(NULL); }
	virtual ~ftp__Position() { }
};
#endif

#ifndef SOAP_TYPE_ftp__ArrayOfFile
#define SOAP_TYPE_ftp__ArrayOfFile (15)
/* ftp:ArrayOfFile */
class SOAP_CMAC ftp__ArrayOfFile
{
public:
	LONG64 id;	/* required element of type xsd:positiveInteger */
	int status;	/* required element of type xsd:int */
	std::string path;	/* required element of type xsd:string */
	std::vector<ftp__File * >__ptr;
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ftp__ArrayOfFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ftp__ArrayOfFile() : id(0), status(0) { this->soap_default(NULL); }
	virtual ~ftp__ArrayOfFile() { }
};
#endif

#ifndef SOAP_TYPE_ftp__State
#define SOAP_TYPE_ftp__State (19)
/* ftp:State */
class SOAP_CMAC ftp__State
{
public:
	LONG64 total;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:positiveInteger */
	LONG64 downloaded;	/* required element of type xsd:positiveInteger */
	LONG64 fsize;	/* required element of type xsd:positiveInteger */
	LONG64 fdownloaded;	/* required element of type xsd:positiveInteger */
	enum ftp__Status status;	/* required element of type ftp:Status */
	std::string fname;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ftp__State */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ftp__State() : total(0), downloaded(0), fsize(0), fdownloaded(0), status((enum ftp__Status)0) { this->soap_default(NULL); }
	virtual ~ftp__State() { }
};
#endif

#ifndef SOAP_TYPE_ftp__TransformResponse
#define SOAP_TYPE_ftp__TransformResponse (24)
/* ftp:TransformResponse */
struct ftp__TransformResponse
{
public:
	int response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ftp__Transform
#define SOAP_TYPE_ftp__Transform (25)
/* ftp:Transform */
struct ftp__Transform
{
public:
	ftp__ArrayOfFile *flist;	/* optional element of type ftp:ArrayOfFile */
	ftp__Position *position;	/* optional element of type ftp:Position */
};
#endif

#ifndef SOAP_TYPE_ftp__StopResponse
#define SOAP_TYPE_ftp__StopResponse (27)
/* ftp:StopResponse */
struct ftp__StopResponse
{
public:
	int response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ftp__Stop
#define SOAP_TYPE_ftp__Stop (28)
/* ftp:Stop */
struct ftp__Stop
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ftp__StartResponse
#define SOAP_TYPE_ftp__StartResponse (30)
/* ftp:StartResponse */
struct ftp__StartResponse
{
public:
	int response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ftp__Start
#define SOAP_TYPE_ftp__Start (31)
/* ftp:Start */
struct ftp__Start
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ftp__PauseResponse
#define SOAP_TYPE_ftp__PauseResponse (33)
/* ftp:PauseResponse */
struct ftp__PauseResponse
{
public:
	int response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ftp__Pause
#define SOAP_TYPE_ftp__Pause (34)
/* ftp:Pause */
struct ftp__Pause
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ftp__ResumeResponse
#define SOAP_TYPE_ftp__ResumeResponse (36)
/* ftp:ResumeResponse */
struct ftp__ResumeResponse
{
public:
	int response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ftp__Resume
#define SOAP_TYPE_ftp__Resume (37)
/* ftp:Resume */
struct ftp__Resume
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ftp__DeleteResponse
#define SOAP_TYPE_ftp__DeleteResponse (39)
/* ftp:DeleteResponse */
struct ftp__DeleteResponse
{
public:
	int response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ftp__Delete
#define SOAP_TYPE_ftp__Delete (40)
/* ftp:Delete */
struct ftp__Delete
{
public:
	LONG64 id;	/* required element of type xsd:positiveInteger */
};
#endif

#ifndef SOAP_TYPE_ftp__DeleteAllResponse
#define SOAP_TYPE_ftp__DeleteAllResponse (42)
/* ftp:DeleteAllResponse */
struct ftp__DeleteAllResponse
{
public:
	int response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ftp__DeleteAll
#define SOAP_TYPE_ftp__DeleteAll (43)
/* ftp:DeleteAll */
struct ftp__DeleteAll
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ftp__GetState
#define SOAP_TYPE_ftp__GetState (46)
/* ftp:GetState */
struct ftp__GetState
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (47)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (48)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (50)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (53)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (54)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__positiveInteger
#define SOAP_TYPE_xsd__positiveInteger (10)
typedef LONG64 xsd__positiveInteger;
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (12)
typedef std::string xsd__string;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of FtpStub.h */
